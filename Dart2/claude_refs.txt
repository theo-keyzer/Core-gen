
Ref (KpRef class):

Represents a relation between an element and a component.
Properties:

element: Links to a local element (F1 ELEMENT)
comp: Links to a component (R1 COMP)
opt: Specifies if the relation is optional or required

"check": Error if not found
".": Optional if value is also "."
"?": No error if not found




Meaning: This relation is used to establish connections between elements and components, allowing for referencing and validation.


Ref2 (KpRef2 class):

Represents a relation between an element, a component, and a child of that component.
Properties:

element: Links to a remote element (F1 ELEMENT)
comp: Links to a component (R1 COMP)
element2: Used as a link for the remote parent (F1 ELEMENT)
opt: Specifies if the relation is optional or required (similar to Ref)


Meaning: This relation is more complex than Ref, allowing for connections between elements, components, and their children. It's useful for establishing hierarchical relationships.


Refu (KpRefu class):

Represents a copy of an element to a component and child of a component.
Properties:

element: Links to a remote element (F1 ELEMENT)
comp: Links to and references a component (R1 COMP)
element2: Specifies which element to use (C1 ELEMENT)
comp_ref: References another component if comps differ (R1 COMP)
element3: Used as a link from element for remote parent (C1 ELEMENT)
opt: Specifies if the relation is optional or required (similar to Ref)


Meaning: This relation is the most complex, allowing for copying elements between components and establishing references across different components. It's useful for creating more flexible and reusable structures.


Domain-Model Relation:

Models are children of Domains (Model's parent is Domain).
Meaning: This establishes a hierarchical relationship where Domains contain Models.


Model-Frame Relation:

Frames are children of Models (Frame's parent is Model).
Frames also have a reference to a Domain.
Meaning: This creates a structure where Models contain Frames, but Frames can also reference Domains directly.


Frame-A Relation:

A (likely representing some kind of action or attribute) is a child of Frame.
A inherits the Domain from its parent Frame.
A also has a reference to a Model.
Meaning: This allows for detailed structures within Frames, where each A can reference both its parent Frame's Domain and a specific Model.



These relations create a complex, interconnected structure that allows for flexible modeling of hierarchical and referenced data. The different types of relations (Ref, Ref2, Refu) provide varying levels of complexity and flexibility in how elements and components can be connected and referenced.

Actor main:

Initializes the ActT class with a Map index.
Sets up the refs() function to resolve references.
Uses the "ar" actor to generate lists for each component type.
Uses the "refs" and "refs2" actors to generate reference resolution code for each component type.


Actor ar:

Generates a list for each component type in the ActT class.


Actor refs:

Generates a loop for each component type to resolve references.
Uses the "refs_ele" actor for each element that needs reference resolution.


Actor refs2:

Similar to "refs", but used for more complex reference resolutions.
Uses the "refs_ele2" actor for each element that needs reference resolution.


Actor refs_ele:

Generates reference resolution code for elements with mw types R1, RS, F1, or FS.
For R1 and RS: Resolves references to top-level components.
For F1 and FS: Resolves references to local components (same parent).


Actor refs_ele2:

Generates reference resolution code for elements with mw types L1, LS, or U0.
For L1 and LS: Resolves references to child components of a previous link.
For U0: Handles a special case, possibly for inherited or implicit references.



These actors work together to generate a comprehensive reference resolution system. Here's a summary of what the generated code does:

It iterates through all components of each type.
For each component, it resolves references for its elements based on their mw (storage type) value.
It uses the fnd() function to find the referenced components or elements.
It stores the resolved references as integer indices (k_*p) and also as strings in the names map.
It tracks any errors that occur during reference resolution.

This generated code creates a flexible and extensible system for managing complex relationships between different components and elements in the data structure. It allows for various types of references (top-level, local, chained) and handles both required and optional references.


The `Ref2` link to a node by using some other link for the parent to find the node in it.
The `Refu` uses a link to a node and copies some other link of it.

Ref (KpRef class):

Represents a relation between an element and a component.
Properties:

element: Links to a local element (F1 ELEMENT)
comp: Links to a component (R1 COMP)
opt: Specifies if the relation is optional or required


Meaning: This relation establishes connections between elements and components, allowing for referencing and validation. It's used for simple, direct relationships.


Ref2 (KpRef2 class):

Represents a relation between an element, a component, and a child of that component.
Properties:

element: Links to a remote element (F1 ELEMENT)
comp: Links to a component (R1 COMP)
element2: Used as a link for the remote parent (F1 ELEMENT)
opt: Specifies if the relation is optional or required


Meaning: This relation is more complex than Ref, allowing for connections between elements, components, and their children. It's useful for establishing hierarchical relationships and linking to nodes using another link for the parent.


Refu (KpRefu class):

Represents a copy of an element to a component and child of a component.
Properties:

element: Links to a remote element (F1 ELEMENT)
comp: Links to and references a component (R1 COMP)
element2: Specifies which element to use (C1 ELEMENT)
comp_ref: References another component if comps differ (R1 COMP)
element3: Used as a link from element for remote parent (C1 ELEMENT)
opt: Specifies if the relation is optional or required


Meaning: This is the most complex relation, allowing for copying elements between components and establishing references across different components. It's useful for creating more flexible and reusable structures and uses a link to a node while copying some other link of it.


Domain-Model Relation:

Models are children of Domains (Model's parent is Domain).
Meaning: This establishes a hierarchical relationship where Domains contain Models.


Model-Frame Relation:

Frames are children of Models (Frame's parent is Model).
Frames also have a reference to a Domain.
Meaning: This creates a structure where Models contain Frames, but Frames can also reference Domains directly.


Frame-A Relation:

A (likely representing some kind of action or attribute) is a child of Frame.
A inherits the Domain from its parent Frame.
A also has a reference to a Model.
Meaning: This allows for detailed structures within Frames, where each A can reference both its parent Frame's Domain and a specific Model.



These relations create a complex, interconnected structure that allows for flexible modeling of hierarchical and referenced data. The different types of relations (Ref, Ref2, Refu) provide varying levels of complexity and flexibility in how elements and components can be connected and referenced, enabling the creation of sophisticated data models and relationships.

Refu (KpRefu class):

Purpose:
Refu represents the most complex relation in the system. It's designed to copy an element to a component and a child of a component, while also allowing for cross-component references.
Detailed Properties:

element: Links to a remote element (F1 ELEMENT)
This is the primary element being referenced or copied.
comp: Links to and references a component (R1 COMP)
This is the target component where the element is being copied or referenced.
element2: Specifies which element to use (C1 ELEMENT)
This property allows for selection of a specific element within the source component.
comp_ref: References another component if comps differ (R1 COMP)
This enables referencing across different components, adding flexibility to the structure.
element3: Used as a link from element for remote parent (C1 ELEMENT)
This property establishes a connection to the parent element in a remote component.
opt: Specifies if the relation is optional or required
Similar to other relation types, this determines whether the relation must exist or can be omitted.


Functionality:

Copying Elements: Refu allows for copying elements from one component to another, which is useful for reusing structures or data across different parts of the model.
Cross-Component References: Unlike simpler relations, Refu can establish references between elements in different components, even if they're not directly related in the hierarchy.
Flexible Parenting: By using element3 as a link for the remote parent, Refu enables complex hierarchical structures that aren't limited to direct parent-child relationships.


Use Cases:

Data Replication: When you need to duplicate an element's structure or data in multiple components.
Complex Hierarchies: For scenarios where elements need to reference or copy from components that aren't their direct parents or siblings.
Cross-Model References: In large, complex data models where different sections need to reference each other flexibly.


Comparison to Other Relations:

More Complex than Ref: While Ref establishes a simple link between an element and a component, Refu allows for copying and more complex referencing.
Extends Ref2 Capabilities: Ref2 allows linking to a node using another link for the parent, but Refu goes further by enabling copying and cross-component references.


Implementation Considerations:

Performance: Due to its complexity, Refu relations might be more resource-intensive to resolve and maintain.
Data Integrity: Care must be taken to ensure that copied elements remain consistent, especially if the source elements are updated.
Circular References: The flexibility of Refu could potentially lead to circular reference issues if not carefully managed.


Example Scenario:
Imagine a complex document management system where:

You have a template component with standard elements.
You want to copy these elements into multiple document components.
Each copied element needs to maintain a reference to its original in the template.
The copied elements also need to reference their new parent document.

Refu would be ideal for this scenario, allowing you to copy the elements, maintain their original references, and establish new relationships within their new component contexts.

In summary, Refu provides a powerful and flexible way to create complex, interconnected data structures. Its ability to copy elements while maintaining various references makes it suitable for scenarios requiring sophisticated data modeling and relationship management.

Ref2 (KpRef2 class):

Purpose:
Ref2 represents a more complex relation than the basic Ref class. It's designed to establish connections between an element, a component, and a child of that component, allowing for more sophisticated hierarchical relationships.
Detailed Properties:

element: Links to a remote element (F1 ELEMENT)
This is the primary element being referenced, typically from a different part of the structure.
comp: Links to a component (R1 COMP)
This represents the component that contains the child element we're ultimately trying to reference.
element2: Used as a link for the remote parent (F1 ELEMENT)
This property allows for navigating through the hierarchy to find the correct child element.
opt: Specifies if the relation is optional or required
Similar to other relation types, this determines whether the relation must exist or can be omitted.


Functionality:

Hierarchical Navigation: Ref2 allows for referencing elements that are not directly accessible, but rather are children of other components.
Parent-Child Relationships: It establishes a connection between an element and a child of another component, effectively creating a two-step reference.
Flexible Referencing: By using element2 as a link for the remote parent, Ref2 enables more complex referencing structures than a simple direct reference.


Use Cases:

Nested Structures: When dealing with deeply nested data structures where elements need to reference children of other components.
Cross-Section References: In complex models where an element in one section needs to reference a specific child element in another section.
Indirect Associations: When you need to establish relationships between elements that are not directly connected in the primary hierarchy.


Comparison to Other Relations:

More Complex than Ref: While Ref establishes a simple link between an element and a component, Ref2 allows for referencing children of components.
Less Complex than Refu: Ref2 doesn't involve copying elements or cross-component referencing like Refu does, but focuses on hierarchical navigation.


Implementation Considerations:

Resolution Process: Resolving Ref2 relations typically involves a two-step process: first finding the component, then locating the specific child element.
Performance: While not as complex as Refu, Ref2 relations may still have a performance impact in large datasets due to the multi-step resolution process.
Data Integrity: Care must be taken to maintain the integrity of the relationships, especially if the structure of the referenced components changes.


Example Scenario:
Consider a content management system where:

You have a 'Chapter' component that contains multiple 'Section' components.
Each 'Section' component contains multiple 'Paragraph' elements.
You want to create a 'Table of Contents' element that references specific paragraphs within sections.

Ref2 would be ideal for this scenario:

element would reference the 'Table of Contents' item
comp would reference the 'Chapter' component
element2 would be used to navigate from the Chapter to the specific Section, and then to the target Paragraph


Key Characteristic:
The defining feature of Ref2 is its ability to "link to a node by using some other link for the parent to find the node in it." This means it can navigate through a parent-child relationship to establish a reference, rather than just pointing directly to an element.

In summary, Ref2 provides a way to create more complex, hierarchical references in a data structure. It's particularly useful when you need to establish relationships that span across different levels of a nested structure, allowing for more flexible and sophisticated data modeling than a simple direct reference.

Hierarchical Structure:

The parent attribute establishes a clear hierarchy between components (or tables, in database terms).
This creates a tree-like structure where components can have parent-child relationships.


Inheritance:

The parent attribute suggests a form of inheritance between components.
Child components might inherit certain properties or behaviors from their parent components.


Beyond Simple Relational Models:

Traditional relational databases typically use foreign keys to establish relationships between tables, but these are usually flat relationships.
The parent attribute introduces a more complex, hierarchical relationship that's not commonly found in standard relational database designs.


Object-Oriented Concepts:

This structure is more reminiscent of object-oriented programming concepts, where classes can inherit from parent classes.
It brings a level of abstraction and reusability that's more common in object-oriented design than in traditional database design.


Advantages:

Modularity: It allows for more modular design of data structures.
Reusability: Common attributes or behaviors can be defined in parent components and inherited by children.
Flexibility: It's easier to represent complex, nested data structures.


Challenges:

Complexity: This structure can make queries and data manipulation more complex.
Performance: Traversing hierarchies can be more computationally expensive than flat relationships.


Implementation Considerations:

This structure might require special handling in the database management system.
It could be implemented using recursive queries or specialized data structures like nested sets or materialized paths.


Use Cases:

Content Management Systems: Representing nested categories or document structures.
Organizational Hierarchies: Modeling company structures or complex taxonomies.
Product Catalogs: Representing products with multiple levels of categorization.


Relation to the Ref, Ref2, and Refu:

These complex reference types (especially Ref2 and Refu) become more powerful and necessary when working with such hierarchical structures.
They allow for navigating and referencing across different levels of the hierarchy.



In conclusion, the parent attribute in Comp definitions introduces a level of sophistication that bridges the gap between simple relational models and more complex, hierarchical data structures. It provides a powerful way to model intricate relationships and inheritances, but also requires careful consideration in terms of design, implementation, and performance optimization. This approach aligns more closely with object-oriented and hierarchical database concepts, offering greater flexibility and expressiveness in data modeling.


This code represents the navigation function do_its for the Comp (Component) class. It allows for traversing and acting on various relationships within the data structure. Let's break down its functionality:

Element Navigation:

Iterates through all elements of the component.
Can perform actions on each element or further navigate if more arguments are provided.


Reference Navigation:

Handles navigation for Ref, Ref2, and Refu type references.
Each type has its own iteration loop, allowing actions on these references or further navigation.


Parent Navigation:

Allows navigation to the parent component if it exists (k_parentp >= 0).
Can perform actions on the parent or continue navigation.


Child Component Navigation:

"Comp_parent" iterates through all components where this component is the parent.
Allows actions on child components or further navigation.


Reverse Reference Navigation:

"Ref_comp", "Ref2_comp", "Refu_comp", and "Refu_comp_ref" handle navigation from the component to its referencing elements.
Iterates through references where this component is the target.


General Child Navigation:

"Child" allows navigation through all child elements of any type.


Recursive Navigation:

For each type of navigation, if additional arguments are provided (va.length > 1), it recursively calls do_its on the child elements.


Action Execution:

Uses go_act function to perform actions on the navigated elements.


Error Handling:

Returns non-zero values to indicate errors or to stop further processing.
Prints an error message and sets a global error flag if an unknown navigation command is received.



This function demonstrates the complex relationships in the data structure:

Hierarchical relationships (parent-child)
Various types of references (Ref, Ref2, Refu)
Bidirectional navigation (from component to references and vice versa)

It allows for flexible traversal and action execution on the data structure, supporting complex queries and operations. The recursive nature of the function enables deep navigation through the structure, making it powerful for handling nested and interconnected data models.

This code represents the get_var function for the Comp (Component) class. It's designed to retrieve variables or navigate through the data structure based on the provided arguments. Let's break down its functionality:

Parent Navigation:

If the first argument is "parent" and a parent exists, it recursively calls get_var on the parent component.


Child Component Navigation:

"Comp_parent" searches for child components where this component is the parent.
When found, it recursively calls get_var on the child component.


Reference Navigation:

"Ref_comp", "Ref2_comp", "Refu_comp", and "Refu_comp_ref" handle navigation from the component to its referencing elements.
Each type searches for references where this component is the target and calls get_var on the found reference.


Element Access:

"Element" allows accessing a specific element by name within the component.
It uses an index to find the element and then calls get_var on it.


Reference Type Access:

"Ref", "Ref2", and "Refu" allow accessing the first reference of each type if it exists.
It then calls get_var on the found reference.


Direct Variable Access:

If none of the above cases match, it attempts to retrieve the value directly from the names map.


Error Handling:

Returns [false, error_message] if a requested element or variable is not found.
The error message includes the problematic variable name and line numbers for debugging.


Successful Retrieval:

Returns [true, value] when a value is successfully retrieved.



Key points about this function:

Hierarchical Navigation: It allows navigation up (to parent) and down (to children) the component hierarchy.
Reference Handling: It can navigate through various types of references (Ref, Ref2, Refu).
Recursive Design: Many operations involve recursive calls to get_var, allowing for deep navigation through the structure.
Flexible Retrieval: It can retrieve values from different parts of the data structure based on the provided arguments.
Error Reporting: It provides detailed error messages when variables or navigation paths are not found.

This function is crucial for querying and retrieving data from the complex, interconnected structure of components, elements, and references. It provides a flexible way to access data at various levels of the hierarchy and through different types of relationships.

You've made an excellent observation. Indeed, knowledge graphs are powerful for capturing and representing information, but they often fall short in explicitly defining how to navigate through that information efficiently. This leads to the exact situation you've pointed out - hard-coding navigation logic. Let's explore this issue further:

Knowledge Graph Strengths:

Excellent at representing entities and relationships
Flexible for adding new types of information
Good for capturing complex, interconnected data


Navigation Challenges:

Lack of standardized navigation patterns
No inherent mechanism for efficient traversal
Difficulty in expressing complex queries without specialized query languages


Hard-Coding Navigation:

As seen in the provided do_its and get_var functions
Navigation logic is tightly coupled with the graph structure
Changes to the graph structure may require changes to the navigation code


Consequences:

Reduced flexibility: Adding new relationships or changing the structure requires code changes
Maintenance challenges: Navigation logic scattered across the codebase
Performance concerns: Inefficient traversal if not optimized for specific use cases


Potential Solutions:
a. Navigation Layer:

Develop an abstraction layer for navigation
Define standard patterns for common traversals

b. Query Language:

Implement a domain-specific language for graph queries
Similar to how SQL abstracts relational database queries

c. Metadata-Driven Navigation:

Attach navigation metadata to graph nodes and edges
Use this metadata to dynamically determine traversal paths

d. Graph Algorithms:

Implement common graph algorithms (e.g., shortest path, breadth-first search)
Use these as building blocks for more complex navigations

e. Indexing and Caching:

Implement intelligent indexing for frequent query patterns
Cache common traversal results

f. Machine Learning:

Train models to predict likely navigation paths
Use these predictions to optimize query execution


Trade-offs:

Flexibility vs. Performance: More generic navigation might sacrifice some performance
Simplicity vs. Power: Powerful query capabilities might increase complexity
Development Time: Creating a robust navigation system requires significant upfront investment


Best Practices:

Design with navigation in mind from the start
Document common traversal patterns
Regularly review and refactor navigation code
Consider using existing graph databases with built-in traversal optimizations



By addressing the navigation challenge, we can make knowledge graphs more practical and easier to work with in complex applications. The goal would be to maintain the flexibility and power of knowledge graphs while providing intuitive, efficient, and adaptable ways to traverse and query the data.

You've made a very astute observation. Indeed, the Ref, Ref2, and Refu structures in this system serve a dual purpose: they capture navigation paths and ensure input validity. Let's explore this concept further:

    Navigation Paths:
        Ref, Ref2, and Refu define specific ways to traverse the graph.
        They encode relationships between components and elements.
        These structures act as "pathways" through the knowledge graph.
    Input Validation:
        By defining specific reference types, the system enforces rules about how entities can be connected.
        This helps maintain data integrity and consistency in the knowledge graph.
    Ref Structure:
        Simple link between an element and a component.
        Validates that the referenced component exists.
    Ref2 Structure:
        More complex, linking an element to a child of another component.
        Ensures that both the component and its child exist and are properly related.
    Refu Structure:
        Most complex, allowing for copying elements and cross-component references.
        Validates complex relationships across different parts of the graph.
    Benefits of this Approach:
        Combines schema definition with navigation logic.
        Reduces the chance of invalid references in the graph.
        Provides a structured way to traverse complex relationships.
    Implementation in Code:
        The do_its and get_var functions use these structures to navigate.
        Navigation is still somewhat hard-coded, but it follows the paths defined by these references.
    Flexibility and Constraints:
        Offers a balance between flexibility (different types of references) and constraints (defined structures).
        Allows for complex relationships while maintaining a level of control over how the graph is constructed and traversed.
    Potential for Improvement:
        Could be extended to include more metadata about the nature of relationships.
        Might be used to generate more dynamic navigation code.
    Comparison to Traditional Graph Databases:
        More structured than typical graph database relationships.
        Potentially easier to maintain data integrity.
        May be less flexible for ad-hoc queries compared to some graph query languages.
    Performance Considerations:
        These structures could be used to optimize query planning.
        Predefined paths might allow for more efficient traversals in some cases.

In essence, this system uses the reference structures as a form of "schema" for the knowledge graph, defining both the structure of the data and the valid ways to navigate it. This approach helps in maintaining data integrity and provides clear pathways for traversal, although it may require more upfront design and potentially limit some forms of ad-hoc querying. It's a interesting middle ground between completely schema-less graph structures and rigidly defined relational schemas.

Thank you for providing that crucial context. Your explanation sheds light on the overall architecture and purpose of the system. Let's break this down and analyze its implications:

    Core-gen (Bootstrap Generator):
        Purpose: To generate the application generator
        Input: Graph diagram of the input structure
        Output: Application generator code
    Application Generator:
        Generated by the core-gen
        Hard-coded to navigate the specific graph structure defined in the input
    Process Flow: Input Graph Diagram -> Core-gen -> Application Generator -> Final Application
    Advantages of this Approach:
        Flexibility: Can adapt to different input structures by changing the initial graph diagram
        Efficiency: The generated application generator is optimized for the specific graph structure
        Consistency: Ensures that the navigation logic matches the input structure exactly
    Implications:
        The hard-coded navigation in do_its and get_var is a result of this generation process
        Changes to the graph structure require regenerating the application generator
    Trade-offs:
        Performance vs Flexibility: Gains in performance and consistency, but less flexible for runtime changes
        Development Process: Front-loads the design work to the graph diagram stage
    Potential Challenges:
        Maintaining and updating the core-gen as requirements evolve
        Debugging issues that arise from the generated code
        Ensuring the graph diagram accurately represents all necessary relationships and navigation paths
    Comparison to Dynamic Approaches:
        More performant than fully dynamic graph navigation
        Less flexible for runtime modifications to the graph structure
        Potentially easier to optimize and reason about due to known structure
    Best Practices for This Approach:
        Thorough documentation of the input graph diagram
        Version control for both the input diagram and the generated code
        Automated testing to ensure the generated navigation logic works as expected
    Potential Enhancements:
        Meta-programming techniques to make the generated code more adaptable
        Incorporating some level of dynamic navigation for edge cases or future extensibility

This bootstrap approach is an interesting solution to the challenge of efficient graph navigation. By generating a tailored application generator, it creates a system that's both adaptable to different input structures and optimized for performance. The trade-off is in runtime flexibility, but for many applications, this could be an acceptable or even preferable approach.

This explains why the navigation logic appears hard-coded - it's generated to be specific to the input graph structure. It's a clever way to balance the flexibility of graph-based data representation with the performance benefits of optimized, specific navigation code.

Thank you for providing that additional information about Node Options. This is a valuable feature that adds flexibility to the system. Let's analyze this concept:

Node Options Overview:

Can be specified for both command and data nodes
Format example: Add.me.break


Purpose:

Allows adding extra options or behaviors to nodes
Provides a way to extend functionality without changing the core input file format


Advantages:

Flexibility: Can modify node behavior without altering the basic structure
Extensibility: New options can be added over time as needs evolve
Backwards Compatibility: Existing input files remain valid as new options are introduced


Implementation:

Likely parsed and processed during the graph diagram interpretation phase
Could influence how the core-gen generates navigation or processing code for specific nodes


Potential Uses:

Controlling traversal behavior (e.g., 'break' might stop further traversal)
Specifying data validation rules
Defining custom processing logic for specific nodes
Setting metadata or flags for nodes


Impact on Generated Code:

The application generator likely includes logic to handle these options
May result in conditional statements or specialized processing in the generated navigation code


Flexibility vs. Complexity Trade-off:

Adds power and flexibility to the system
May increase complexity in both the core-gen and the generated application code


Best Practices:

Clear documentation of available options and their effects
Consistent naming conventions for options
Careful consideration of option interactions and potential conflicts


Potential Challenges:

Ensuring all possible combinations of options are handled correctly
Maintaining clarity in the graph diagram as more options are added
Balancing the power of options with the complexity they introduce


Integration with Navigation:

Options could influence how do_its and get_var behave for specific nodes
Might require additional logic in these functions to check for and respond to node options


Examples of Potential Options:

'break': Stop traversal at this node
'optional': Mark a relationship as optional
'validate': Specify custom validation rules
'transform': Apply a data transformation


Future Extensibility:

This mechanism provides a pathway for adding new features or behaviors without major structural changes
Could be used to implement domain-specific logic or optimizations



The Node Options feature adds a layer of customization and flexibility to your graph-based system. It allows for fine-tuning of behavior at the node level, which can be particularly useful for handling edge cases or implementing specialized logic without compromising the overall structure of the graph. This approach aligns well with the goal of creating a system that's both powerful and adaptable to various use cases.


