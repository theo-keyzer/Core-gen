----------------------------------------------------------------
Concept Actor
----------------------------------------------------------------

Topic bld 1 h1 Actor class

T . Loader definition for actors.
T . These are like routines the generator calls
T . for generating code.
T . Actors group on name

Topic bld 2 p Actor variables.

T . name: of actor
T . comp: what it belongs to
T . attr: what to check
T . eq: to equal
T . value: this

Topic bld 2 p eq options.

T . ??: matches variable errors
T . ?: match no variable errors
T . &: previous actor match and current actor match
T . &: previous actor match or current actor match
T . =: equal
T . !=: not equal
T . in: item in a list
T . !in: item not in list
T . has: list has item
T . regex: regex match

Topic bld 2 p Child nodes.

T . All: An actor calling type.
T . Du: An actor calling type.
T . New: Create new comp and add
T . Refs: Re run refs after loading new defs
T . Var: Set variable to value
T . Its: Call this actor
T . C: Output code to file.
T . Cs: Output code sniplet to file - no newline
T . Out: Output control
T . In: Redirect output to the ins variable.
T . Break: Break out of actor loop
T . Add: Add to the collection map or list.
T . This: Call this actor
T . Replace: Replace string.
T . Dbconn: connect to database
T . Http: Append http data to the collection map or node path.

Topic bld 2 p Reverse links.

T . All_actor: what actor to run for it
T . Du_actor: what actor to run for it
T . Its_actor: what to do
T . This_actor: what to do

----------------------------------------------------------------
Concept All
----------------------------------------------------------------

Topic bld 1 h1 All class

T . An actor calling type.
T . For each component call this actor.

Topic bld 2 p All variables.

T . what: what to look for
T . actor: what actor to run for it
T . args: arg data value

Topic bld 2 p Links.

T . actor: what actor to run for it

----------------------------------------------------------------
Concept Du
----------------------------------------------------------------

Topic bld 1 h1 Du class

T . An actor calling type.
T . Coditional call to actor

Topic bld 2 p Du variables.

T . actor: what actor to run for it
T . args: arg data value

Topic bld 2 p Links.

T . actor: what actor to run for it

----------------------------------------------------------------
Concept New
----------------------------------------------------------------

Topic bld 1 h1 New class

T . Create new comp and add

Topic bld 2 p New variables.

T . where: add to dats or acts
T . what: what comp to load
T . line: load line args

----------------------------------------------------------------
Concept Refs
----------------------------------------------------------------

Topic bld 1 h1 Refs class

T . Re run refs after loading new defs

Topic bld 2 p Refs variables.

T . where: ref of dats or acts

----------------------------------------------------------------
Concept Var
----------------------------------------------------------------

Topic bld 1 h1 Var class

T . Set variable to value

Topic bld 2 p Var variables.

T . attr: variable name
T . eq: to equal
T . value: this

----------------------------------------------------------------
Concept Its
----------------------------------------------------------------

Topic bld 1 h1 Its class

T . Call this actor
T . For each child or reference of this def

Topic bld 2 p Its variables.

T . what: to look for
T . actor: what to do
T . args: arg data value

Topic bld 2 p Links.

T . actor: what to do

----------------------------------------------------------------
Concept C
----------------------------------------------------------------

Topic bld 1 h1 C class

T . Output code to file.

Topic bld 2 p C variables.

T . desc: code to output.

----------------------------------------------------------------
Concept Cs
----------------------------------------------------------------

Topic bld 1 h1 Cs class

T . Output code sniplet to file - no newline

Topic bld 2 p Cs variables.

T . desc: code to output.

----------------------------------------------------------------
Concept Out
----------------------------------------------------------------

Topic bld 1 h1 Out class

T . Output control
T . delay: output is off until first C in next actor
T . normal: back to normal
T . off: cascade all output  off

Topic bld 2 p Out variables.

T . what: to look for.
T . pad: to look for
T . desc: code to buffer.

Topic bld 2 p what options.

T . delay: output is off until first C in next actor.
T . normal: back to normal.
T . of: output is off.
T . on: output is on.

----------------------------------------------------------------
Concept In
----------------------------------------------------------------

Topic bld 1 h1 In class

T . Redirect output to the ins variable.

Topic bld 2 p In variables.

T . flag: set on or off

----------------------------------------------------------------
Concept Break
----------------------------------------------------------------

Topic bld 1 h1 Break class

T . Break out of actor loop
T . To not do the default one

Topic bld 2 p Break variables.

T . what: what to break
T . pad: padding (of)
T . actor: which actor to break
T . check: only if not unique

Topic bld 2 p what options.

T . actor: continue with calling actor - break actor case.
T . loop: continue after calling All, Its cmd - break loop chain.
T . cmds: continue with actor case - break cmd list.
T . exit: exit script.

Topic bld 2 p check options.

T . actor: continue with calling actor - break actor case.

----------------------------------------------------------------
Concept Add
----------------------------------------------------------------

Topic bld 1 h1 Add class

T . Add to the collection map or list.
T . The path for the collect is _.
T . The path for the current node is .
T . The default is to the string data.
T . Options are:
T . me to add the current node.
T . node to add a node from a path
T . json to add a converted json node.
T . map to add a map.
T . list to add a list.
T . clear to clear the map or list
T . check to not add dups
T . break on dups
T . no_add to only check
T . file as input
T . eval string as input
T . post post to url
T . get from url
T . execute database sql

Topic bld 2 p Add variables.

T . path: node path where to add
T . data: data to add

----------------------------------------------------------------
Concept This
----------------------------------------------------------------

Topic bld 1 h1 This class

T . Call this actor
T . For each child or item in the collection
T . Works the same as the Its command with added navigation for map and lists.

Topic bld 2 p This variables.

T . path: node path
T . actor: what to do
T . args: arg data value

Topic bld 2 p Links.

T . actor: what to do

----------------------------------------------------------------
Concept Replace
----------------------------------------------------------------

Topic bld 1 h1 Replace class

T . Replace string.
T . Replace _:D with abc match cba
T . Options are:
T . group if the match has group sections.

Topic bld 2 p Replace variables.

T . path: node path where to add
T . pad: padding (with)
T . with: what to replace with
T . pad2: padding (match)
T . match: string match pattern

----------------------------------------------------------------
Concept Dbconn
----------------------------------------------------------------

Topic bld 1 h1 Dbconn class

T . connect to database
T . the connection closes at end of script.

Topic bld 2 p Dbconn variables.

T . host: 
T . database: 
T . username: 
T . password: 

----------------------------------------------------------------
Concept Http
----------------------------------------------------------------

Topic bld 1 h1 Http class

T . Append http data to the collection map or node path.
T . Calls the Add command with the body data.
T . Options are:
T . body_node use the body value as a node path.
T . all the options of the Add command.

Topic bld 2 p Http variables.

T . path: node path where to add
T . data: http url
T . body: http body

----------------------------------------------------------------
Concept Comp
----------------------------------------------------------------

Topic bld 1 h1 Comp class

T . Loader definition for the generated classes.
T . A node is defined by a class instance and has a index name of className_nodeName.
T . For child nodes, the index name is 23_className_nodeName where 23 in the index value of its parent.

Topic bld 2 p Comp variables.

T . name: of component.
T . nop: ignored.
T . parent: its parent.
T . find: if need to be found.
T . doc: documentation string

Topic bld 2 p find options.

T . Find: for top level comps
T . FindIn: for nested comps
T . .: has no name field or not needed.

Topic bld 2 p Child nodes.

T . Element: Loader definition for the class variables.
T . Ref: Relation of element to node.
T . Ref2: Relation of element to a child node.
T . Ref3: Relation of element to a child node.
T . Refq: Relation of element to child node.
T . Refu: Copy of element to comp and child of comp
T . Join: Add refs for this join

Topic bld 2 p Links.

T . parent: its parent.

Topic bld 2 p Reverse links.

T . Comp_parent: its parent.
T . Ref_comp: node class name of the link.
T . Ref2_comp: node class name of the link.
T . Ref3_comp: node class name of the link.
T . Ref3_comp_ref: class name of the other node.
T . Refq_comp: class name of the link.
T . Refq_comp_ref: class name of the parent node.
T . Refu_comp: class name of the remote node.
T . Refu_comp_ref: class name of the remote node.

----------------------------------------------------------------
Concept Element
----------------------------------------------------------------

Topic bld 1 h1 Element class

T . Loader definition for the class variables.
T . Navigation code is generated for the relations.
T . A relational element has two variables, one for the node name and one for its id.
T . The refs function is run after the data is loaded to link the relation id's.

Topic bld 2 p Element variables.

T . name: of element
T . mw: storage type
T . mw2: data type - not used.
T . pad: separator.
T . doc: documentation string.

Topic bld 2 p mw options.

T . C1: word
T . V1: string to end of line.
T . F1: link to local comp - same parent - needs a Ref.
T . R1: link to top level comp - Find - needs a Ref.
T . L1: link to child of previous link - R1 for first, L1 for chain - needs a Ref2.
T . M1: link more of L1 - needs Ref3.
T . Q1: link to child of link from parent element - need Refq.
T . N1: nested comp.

Topic bld 2 p Child nodes.

T . Opt: Select options for element.

Topic bld 2 p Reverse links.

T . Ref_element: node name and node ref.
T . Ref2_element: node name and node ref.
T . Ref2_element2: element name to use that has the link to the remote parent node.
T . Ref3_element: node name and node ref.
T . Ref3_element2: element name to use for the link to another node.
T . Refq_element: element name to use for the name to find a node in the remote parent.
T . Refu_element: element name to use to copy remote node id.

----------------------------------------------------------------
Concept Opt
----------------------------------------------------------------

Topic bld 1 h1 Opt class

T . Select options for element.
T . Add meaning to documentation

Topic bld 2 p Opt variables.

T . name: name of value option
T . pad: separator
T . doc: documentation string

----------------------------------------------------------------
Concept Ref
----------------------------------------------------------------

Topic bld 1 h1 Ref class

T . Relation of element to node.
T . For element type R1, is uses the Ref linked to it for:
T . It finds a node with (the comp field of the Ref) with the name of the element value.
T . Finally, it stores the reference id in the elements's ref.
T . For element type F1, is uses the Ref linked to it for:
T . It finds a child node with (the comp field of the Ref) in the parent node with the name of the element value.
T . Finally, it stores the reference id in the element's ref.

Topic bld 2 p Ref variables.

T . element: node name and node ref.
T . comp: node class name of the link.
T . opt: optional or check - error if not found
T . var: not used
T . doc: doc string

Topic bld 2 p opt options.

T . check: check - error if not found
T . .: optional, if value is also a (.)
T . ?: no error if not found

Topic bld 2 p Links.

T . element: node name and node ref.
T . comp: node class name of the link.

----------------------------------------------------------------
Concept Ref2
----------------------------------------------------------------

Topic bld 1 h1 Ref2 class

T . Relation of element to a child node.
T . It starts with the (element2 field), which references a node.
T . That node is then used as the parent to find the child (element field) node.
T . Finally, it stores the reference id in the (element field)'s ref.
T . The (element field) is of type L1.

Topic bld 2 p Ref2 variables.

T . element: node name and node ref.
T . comp: node class name of the link.
T . element2: element name to use that has the link to the remote parent node.
T . opt: optional or check - error if not found
T . var: not used
T . doc: doc string

Topic bld 2 p opt options.

T . check: check
T . .: optional value to use

Topic bld 2 p Links.

T . element: node name and node ref.
T . comp: node class name of the link.
T . element2: element name to use that has the link to the remote parent node.

----------------------------------------------------------------
Concept Ref3
----------------------------------------------------------------

Topic bld 1 h1 Ref3 class

T . Relation of element to a child node.
T . It starts with the (element2 field), which references a node.
T . The (element3 field) in that node, references another node.
T . That node is then used as the parent to find the child node (element field).
T . Finally, it stores the reference id in the (element field)'s ref.
T . The (element field) is of type M1.

Topic bld 2 p Ref3 variables.

T . element: node name and node ref.
T . comp: node class name of the link.
T . element2: element name to use for the link to another node.
T . comp_ref: class name of the other node.
T . element3: element name to use that has the element name of the other node for the link to a remote node.
T . opt: optional or check - error if not found
T . var: not used
T . doc: doc string

Topic bld 2 p opt options.

T . check: check
T . .: optional value to use

Topic bld 2 p Links.

T . element: node name and node ref.
T . comp: node class name of the link.
T . element2: element name to use for the link to another node.
T . comp_ref: class name of the other node.

----------------------------------------------------------------
Concept Refq
----------------------------------------------------------------

Topic bld 1 h1 Refq class

T . Relation of element to child node.
T . It starts with the parent node.
T . The (element2 field) in that node, references another node.
T . That node is then used as the parent to find the child node using the (element field) as name..
T . Finally, it stores the reference id in the (element field)'s ref.
T . The (element field) is of type Q1.

Topic bld 2 p Refq variables.

T . element: element name to use for the name to find a node in the remote parent.
T . comp: class name of the link.
T . element2: element name to use for the element name in the parent node that has a link to the remote parent node.
T . comp_ref: class name of the parent node.
T . opt: optional or check - error if not found
T . var: not used
T . doc: doc string

Topic bld 2 p opt options.

T . check: check
T . .: optional value to use

Topic bld 2 p Links.

T . element: element name to use for the name to find a node in the remote parent.
T . comp: class name of the link.
T . comp_ref: class name of the parent node.

----------------------------------------------------------------
Concept Refu
----------------------------------------------------------------

Topic bld 1 h1 Refu class

T . Copy of element to comp and child of comp
T . It starts with the (element2 field), which references a node. It can be the parent.
T . The (element3 field) in that node, references another node.
T . Finally, it stores the same reference id in the (element field)'s ref.
T . The (element field) is of type U0 that is not a input field.

Topic bld 2 p Refu variables.

T . element: element name to use to copy remote node id.
T . comp: class name of the remote node.
T . element2: element name to use that has a link to a remote node.
T . comp_ref: class name of the remote node.
T . element3: element name to use for the remote comp's element name that has a link, use its link
T . opt: optional or check - error if not found
T . var: not used
T . doc: doc string

Topic bld 2 p opt options.

T . check: check
T . .: optional value to use

Topic bld 2 p Links.

T . element: element name to use to copy remote node id.
T . comp: class name of the remote node.
T . comp_ref: class name of the remote node.

----------------------------------------------------------------
Concept Join
----------------------------------------------------------------

Topic bld 1 h1 Join class

T . Add refs for this join

Topic bld 2 p Join variables.

T . element: 
T . dir: 
T . comp: 
T . using: 
T . element2: 
T . comp2: 
T . element3: 

----------------------------------------------------------------
Concept Concept
----------------------------------------------------------------

Topic bld 1 h1 Concept class


Topic bld 2 p Concept variables.

T . name: name of concept

Topic bld 2 p Child nodes.

T . Topic: 

Topic bld 2 p Reverse links.

T . See_concept: Ref to concept

----------------------------------------------------------------
Concept Topic
----------------------------------------------------------------

Topic bld 1 h1 Topic class


Topic bld 2 p Topic variables.

T . name: topic name
T . level: index tree level
T . tag: html or formating tag
T . desc: doc to output.

Topic bld 2 p Child nodes.

T . T: 
T . See: 

----------------------------------------------------------------
Concept T
----------------------------------------------------------------

Topic bld 1 h1 T class


Topic bld 2 p T variables.

T . file: optional file to include
T . desc: doc to output.

----------------------------------------------------------------
Concept See
----------------------------------------------------------------

Topic bld 1 h1 See class


Topic bld 2 p See variables.

T . concept: Ref to concept

Topic bld 2 p Links.

T . concept: Ref to concept

