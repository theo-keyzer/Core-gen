----------------------------------------------------------------
Actor main .
----------------------------------------------------------------

C part of gen;
C
C class Kp
C {
C 	int me = -1;
C 	String comp = "Kp";
C 	String line_no = "";
C 	List <String> flags = [];
C 	Map names = new Map();
-C 	property names : Hash(String, String) = Hash(String, String).new
C 	int do_its(glob, va, lno) {
C 		print("?No its " + va[0] + " cmd for Kp," + lno + "?");
C 		return(0);
C 	}
C
C 	List get_var(glob, va, lno) {
C 		var v = names[ va[0] ];
C 		if (v != null) {
C 			return( [true, v] );
C 		}
C 		return( [false, "?" + va[0] + "?" + line_no + "," + lno + ",Kp?"] );
C 	}
C }
C


All Comp struct

----------------------------------------------------------------
Actor struct Comp name = Actor
----------------------------------------------------------------

D ${name}c struct

C class Kp${name}c extends Kp 
C {

Its parent parent_field
Its Element val_inc
Its Element val_inc2

C 	List <Kp> childs = [];
C 	bool load(act, ln, pos, lno, flag) {
-C 		var p = pos;
C 		var tok = [pos, ''];
C 		comp = "${name}c";
C 		line_no = lno;
C 		flags = flag;
C 		me = act.ap_${name}l.length;

Its Element ele_act
Its parent parent_field_p
Du index_act

C 		return true;
C 	}
C }
C

Break

----------------------------------------------------------------
Actor struct Comp parent = Actor
----------------------------------------------------------------

D ${name}c struct

C class Kp${name}c extends Kp 
C {

Its parent parent_field
Its Element val_inc
Its Element val_inc2

C 	List <Kp> childs = [];
C 	bool load(act, ln, pos, lno, flag) {
-C 		var p = pos;
C 		var tok = [pos, ''];
C 		comp = "${name}c";
C 		line_no = lno;
C 		flags = flag;
C 		me = act.ap_${name}l.length;

Its Element ele_act
Its parent parent_field_p

C 		return true;
C 	}
C }
C

Break

----------------------------------------------------------------
-Actor struct Comp name != Actor
Actor struct Comp
----------------------------------------------------------------

C class Kp${name}c extends Kp 
C {

Its parent parent_field
Its Element val_inc2
Its Comp_parent from_to
Its Element val_inc_d
Its Comp_parent childs

C
C 	bool load(act, ln, pos, lno, flag) {
-C 		var p = pos;
C 		var tok = [pos, ''];
C 		comp = "${name}c";
C 		line_no = lno;
C 		flags = flag;
C 		me = act.ap_${name}l.length;
C 		names["k_me"] = me.toString();
C 		names["k_parent"] = "-1";
C 		names["k_comp"] = "${name}c";

Its Element ele
Its parent parent_field_p
Du index

C 		return true;
C 	}
C
C 	List get_var(glob, va, lno) {

Its Ref ref_var
Its Ref2 ref_var2
Its Ref3 ref_var3
Its parent parent_field_var
Its Ref_comp other_var
Its Ref2_comp other_var2
Its Ref3_comp other_var3
Its Comp_parent find

C 		var v = names[ va[0] ];
C 		if( v != null) {
C 			return( [true, v] );
C 		}
C 		return( [false, "?" + va[0] + "?" + line_no + "," + lno + ",${name} ?"] );
C 	}
C
C 	int do_its(glob, va, lno) {

Its Comp_parent from_to_doo
Its parent parent_field_func
Its Ref ref_func
Its Ref2 ref_func2
Its Ref3 ref_func3
Its Refq ref_funcq
Its Ref_comp other_func
Its Ref2_comp other_func2
Its Ref3_comp other_func3
Its Refq_comp other_funcq
Its Element nested

C 		if ( va[0].compareTo("Child") == 0 ) { // ${}

Its Comp_parent childs_func

C 			return(0);
C 		}

C 		print("?No its " + va[0] + " cmd for ${name} ," + line_no + "," + lno + "?");
C 		glob.run_errs = true;
C 		return(0);
C 	}
C }
C

----------------------------------------------------------------
Actor nested Element mw = N1
----------------------------------------------------------------

C 		if (va[0].compareTo("${name}l") == 0 && va.length > 1 && parentp >= 0) { // ${}
C 			var pos = 0;
C 			var v = names[ "${name}l" ];
C 			if( v != null) {
C 				pos = int.parse(v);
C 			}
C 			if (va[1].compareTo("down") == 0 && pos > 0) {
C 				var pst = glob.dats.ap_${.struct.parent.name}l[ parentp ];
C 				var isin = false;
C 				for(var st in pst.its${.struct.name}l) {
C 					if (st.me == me) {
C 						isin = true;
C 						continue;
C 					}
C 					if (isin == false) {
C 						continue;
C 					}
C 					var pos2 = 0;
C 					var v2 = st.names[ "${name}l" ];
C 					if(v2 != null) {
C 						pos2 = int.parse(v2);
C 					}
C 					if (pos2 == 0) {
C 						continue;
C 					}
C 					if (pos2 == (pos-1)) {
C 						break;
C 					}
C 					if (pos2 == pos) {
C 						if (va.length > 2) {
C 							return( st.do_its(glob, va.sublist(2), lno) );
C 						}
C 						return( go_act(glob, st) );
C 					}
C 				}
C 				return(0);
C 			}
C 			if (va[1].compareTo("up") == 0 && pos > 0) {
C 				var pst = glob.dats.ap_${.struct.parent.name}l[ parentp ];
C 				var isin = false;
C 				var prev = 0;
C 				for(var st in pst.its${.struct.name}l) {
C 					var pos2 = 0;
C 					var v2 = st.names[ "${name}l" ];
C 					if(v2 != null) {
C 						pos2 = int.parse(v2);
C 					}
C 					if (pos2 == 0) {
C 						continue;
C 					}
C 					if (pos2 == pos && st.me != me) {
C 						prev = st.me;
C 						isin = true;
C 						continue;
C 					}
C 					if (pos2 == (pos-1)) {
C 						isin = false;
C 					}
C 					if (st.me == me && isin == true) {
C 						if (va.length > 2) {
C 							return( glob.dats.ap_${.struct.name}l[prev].do_its(glob, va.sublist(2), lno) );
C 						}
C 						return( go_act(glob, glob.dats.ap_${.struct.name}l[prev] ) );
C 					}
C 				}
C 				return(0);
C 			}
C 			if (va[1].compareTo("left") == 0 && pos > 0) {
C 				var pst = glob.dats.ap_${.struct.parent.name}l[ parentp ];
C 				var isin = false;
C 				var prev = 0;
C 				for(var st in pst.its${.struct.name}l) {
C 					var pos2 = 0;
C 					var v2 = st.names[ "${name}l" ];
C 					if(v2 != null) {
C 						pos2 = int.parse(v2);
C 					}
C 					if (pos2 == 0) {
C 						continue;
C 					}
C 					if (pos2 == (pos-1)) {
C 						prev = st.me;
C 						isin = true;
C 						continue;
C 					}
C 					if (st.me == me && isin == true) {
C 						if (va.length > 2) {
C 							return( glob.dats.ap_${.struct.name}l[prev].do_its(glob, va.sublist(2), lno) );
C 						}
C 						return( go_act(glob, glob.dats.ap_${.struct.name}l[prev] ) );
C 					}
C 				}
C 				return(0);
C 			}
C 			if (va[1].compareTo("right") == 0 && pos > 0) {
C 				var pst = glob.dats.ap_${.struct.parent.name}l[ parentp ];
C 				var isin = false;
C 				for(var st in pst.its${.struct.name}l) {
C 					if (st.me == me) {
C 						isin = true;
C 						continue;
C 					}
C 					if (isin == false) {
C 						continue;
C 					}
C 					var pos2 = 0;
C 					var v2 = st.names[ "${name}l" ];
C 					if(v2 != null) {
C 						pos2 = int.parse(v2);
C 					}
C 					if (pos2 == 0) {
C 						continue;
C 					}
C 					if (pos2 <= pos) {
C 						break;
C 					}
C 					if (pos2 == (pos+1)) {
C 						if (va.length > 2) {
C 							var ret = st.do_its(glob, va.sublist(2), lno);
C 							if (ret != 0) {
C 								return(ret);
C 							}
C 							continue;
C 						}
C 						var ret = go_act(glob, st);
C 						if (ret != 0) {
C 							return(ret);
C 						}
C 					}
C 				}
C 				return(0);
C 			}
C 		}

----------------------------------------------------------------
Actor childs_func Comp name != Actor
----------------------------------------------------------------

C 			for (var st in childs) {
C 				if (va.length > 1) {
C 					var ret = st.do_its(glob, va.sublist(1), lno);
C 					if (ret != 0) {
C 						return(ret);
C 					}
C 					continue;
C 				}
C 				var ret = go_act(glob, st);
C 				if (ret != 0) {
C 					return(ret);
C 				}
C 			}

Break loop

----------------------------------------------------------------
Actor parent_field_p Comp name = Actor
----------------------------------------------------------------

C 		parentp = act.ap_${name}l.length-1;
C 		if (parentp < 0 ) { 
C 			print(lno + " ${.struct.name}c has no ${name}c parent") ;
C 			return false;
C 		}
C 		act.ap_${name}l[ parentp ].childs.add( this );

----------------------------------------------------------------
Actor parent_field_p Comp name != Actor
----------------------------------------------------------------

C 		parentp = act.ap_${name}l.length-1;
C 		names["k_parent"] = parentp.toString();
C 		if (parentp < 0 ) { 
C 			print( lno + " ${.struct.name}c has no ${name}c parent" );
C 			return false;
C 		}
C 		act.ap_${name}l[ parentp ].its${.struct.name}l.add( this );
C 		act.ap_${name}l[ parentp ].childs.add( this );

----------------------------------------------------------------
Actor index Comp find = Find
----------------------------------------------------------------

Its Element index_name

----------------------------------------------------------------
Actor index_name Element name = name
----------------------------------------------------------------

-C 		act.index["${.index.name}c_" + names["name"]] = me;
C 		act.index["${.index.name}c_" + get_name(names, "name") ] = me;

----------------------------------------------------------------
Actor index_act Comp find = Find
----------------------------------------------------------------

Its Element index_act_name

----------------------------------------------------------------
Actor index_act_name Element name = name
----------------------------------------------------------------

C 		act.index["${.index_act.name}c_" + k_name] = me;

----------------------------------------------------------------
Actor index Comp find = FindIn
----------------------------------------------------------------

Its Element index_name_in

----------------------------------------------------------------
Actor index_name_in Element name = name
----------------------------------------------------------------

-C 		var s = parentp.toString() + "_${.index.name}c_" + names["name"];
C 		var s = parentp.toString() + "_${.index.name}c_" + get_name(names, "name");
C 		act.index[s] = me;

----------------------------------------------------------------
Actor ele_act . mw in C1,R1,F1,L1
----------------------------------------------------------------

-C 		p, k_${name}l = getw(ln, p);
C 		tok = getw(ln,tok[0]);
C 		k_${name}l = tok[1];

----------------------------------------------------------------
Actor ele_act . mw = V1
----------------------------------------------------------------

-C 		p, k_${name}l = getws(ln, p);
C 		tok = getws(ln,tok[0]);
C 		k_${name}l = tok[1];

----------------------------------------------------------------
Actor ele . mw in C1,R1,F1,L1,M1,N1,P1,Q1
----------------------------------------------------------------

-C 		p, names["${name}l"] = getw(ln, p);
C 		tok = getw(ln,tok[0]);
C 		names["${name}l"] = tok[1];

----------------------------------------------------------------
Actor ele . mw = V1
----------------------------------------------------------------

-C 		p, names["${name}l"] = getws(ln, p);
C 		tok = getws(ln,tok[0]);
C 		names["${name}l"] = tok[1];

----------------------------------------------------------------
Actor ele . mw in CS,RS,FS,LS,MS,NS,PS,QS
----------------------------------------------------------------

-C 		p, names["${name}l"] = getsw(ln, p);
C 		tok = getsw(ln,tok[0]);
C 		names["${name}l"] = tok[1];

----------------------------------------------------------------
Actor childs Comp
----------------------------------------------------------------

C 	List <Kp> childs = [];

Break loop

----------------------------------------------------------------
Actor find Comp find = FindIn
----------------------------------------------------------------

Its Element ele_name_in

----------------------------------------------------------------
Actor ele_name_in . name = name
----------------------------------------------------------------

C 		if (va[0].compareTo("${.find.name}c") == 0 && va.length > 2) { // ${} 
C 			var en = glob.dats.index[me.toString() + "_${.find.name}c_" + va[1] ];
C 			if(en != null) {
C 				return (glob.dats.ap_${.find.name}l[en].get_var(glob, va.sublist(2), lno));
C 			}
C 			return( [false, "?" + va[0] + "=" + va[1] + "?" + line_no + "," + lno + "?"] );
C 		}

----------------------------------------------------------------
Actor find Comp find != FindIn
----------------------------------------------------------------

C 		if (va[0].compareTo("${name}c") == 0 && va.length > 2 && its${name}l.length > 0) { // ${} 
C 			return (its${name}l[0].get_var(glob, va.sublist(1), lno));
C 		}

----------------------------------------------------------------
Actor ref_func Ref
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) {
C 			if (k_${element.name}lp >= 0) {
C 				var st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ];
C 				if (va.length > 1) {
C 					return( st.do_its(glob, va.sublist(1), lno) );
C 				}
C 				return( go_act(glob, st) );
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor ref_func2 Ref2
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) {
C 			if (k_${element.name}lp >= 0) {
C 				var st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ];
C 				if (va.length > 1) {
C 					return( st.do_its(glob, va.sublist(1), lno) );
C 				}
C 				return( go_act(glob, st) );
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor ref_func3 Ref3
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) {
C 			if (k_${element.name}lp >= 0) {
C 				var st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ];
C 				if (va.length > 1) {
C 					return( st.do_its(glob, va.sublist(1), lno) );
C 				}
C 				return( go_act(glob, st) );
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor ref_funcq Refq
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) {
C 			if (k_${element.name}lp >= 0) {
C 				var st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ];
C 				if (va.length > 1) {
C 					return( st.do_its(glob, va.sublist(1), lno) );
C 				}
C 				return( go_act(glob, st) );
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor parent_field_func Comp
----------------------------------------------------------------

C 		if (va[0].compareTo("parent") == 0) { // ${}
C 			if (parentp >= 0) {
C 				var st = glob.dats.ap_${name}l[ parentp ];
C 				if (va.length > 1) {
C 					return( st.do_its(glob, va.sublist(1), lno) );
C 				}
C 				return( go_act(glob, st) );
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor parent_field_var Comp
----------------------------------------------------------------

C 		if (va[0].compareTo("parent") == 0) { // ${}
C 			if (parentp >= 0 && va.length > 1) {
C 				return( glob.dats.ap_${name}l[ parentp ].get_var(glob, va.sublist(1),lno) );
C 			}
C 		}

----------------------------------------------------------------
Actor other_func Ref
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0) { // ${} 
C 			for (Kp${parent.name}c st in glob.dats.ap_${parent.name}l) {
C 				if (st.k_${element.name}lp == me) {
C 					if (va.length > 1) {
C 						var ret = st.do_its(glob, va.sublist(1), lno);
C 						if (ret != 0) {
C 							return(ret);
C 						}
C 						continue;
C 					}
C 					var ret = go_act(glob, st);
C 					if (ret != 0) {
C 						return(ret);
C 					}
C 				}
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor other_func2 Ref2
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0) { // ${} 
C 			for (Kp${parent.name}c st in glob.dats.ap_${parent.name}l) {
-C 			glob.dats.ap_${parent.name}l.each do |st| {
C 				if (st.k_${element.name}lp == me) {
C 					if (va.length > 1) {
C 						var ret = st.do_its(glob, va.sublist(1), lno);
C 						if (ret != 0) {
C 							return(ret);
C 						}
C 						continue;
C 					}
C 					var ret = go_act(glob, st);
C 					if (ret != 0) {
C 						return(ret);
C 					}
C 				}
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor other_func3 Ref3
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0) { // ${} 
C 			for (Kp${parent.name}c st in glob.dats.ap_${parent.name}l) {
-C 			glob.dats.ap_${parent.name}l.each do |st| {
C 				if (st.k_${element.name}lp == me) {
C 					if (va.length > 1) {
C 						var ret = st.do_its(glob, va.sublist(1), lno);
C 						if (ret != 0) {
C 							return(ret);
C 						}
C 						continue;
C 					}
C 					var ret = go_act(glob, st);
C 					if (ret != 0) {
C 						return(ret);
C 					}
C 				}
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor other_funcq Refq
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0) { // ${} 
C 			for (Kp${parent.name}c st in glob.dats.ap_${parent.name}l) {
-C 			glob.dats.ap_${parent.name}l.each do |st| {
C 				if (st.k_${element.name}lp == me) {
C 					if (va.length > 1) {
C 						var ret = st.do_its(glob, va.sublist(1), lno);
C 						if (ret != 0) {
C 							return(ret);
C 						}
C 						continue;
C 					}
C 					var ret = go_act(glob, st);
C 					if (ret != 0) {
C 						return(ret);
C 					}
C 				}
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor ref_var Ref
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) { // ${}
C 			if (k_${element.name}lp >= 0 && va.length > 1) {
C 				return( glob.dats.ap_${comp.name}l[ k_${element.name}lp ].get_var(glob, va.sublist(1), lno) );
C 			}
C 		}

----------------------------------------------------------------
Actor ref_var2 Ref2
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) { // ${}
C 			if (k_${element.name}lp >= 0 && va.length > 1) {
C 				return( glob.dats.ap_${comp.name}l[ k_${element.name}lp ].get_var(glob, va.sublist(1), lno) );
C 			}
C 		}

----------------------------------------------------------------
Actor ref_var3 Ref3
----------------------------------------------------------------

C 		if (va[0].compareTo("${element.name}l") == 0) { // ${}
C 			if (k_${element.name}lp >= 0 && va.length > 1) {
C 				return( glob.dats.ap_${comp.name}l[ k_${element.name}lp ].get_var(glob, va.sublist(1), lno) );
C 			}
C 		}

----------------------------------------------------------------
Actor star Star
----------------------------------------------------------------

D 	* ${doc} 

----------------------------------------------------------------
Actor val_inc_d Element
----------------------------------------------------------------

D 	${name}l * ${doc} 

----------------------------------------------------------------
-Actor val_inc Element
Actor val_inc Element mw = C1 	String k_${name}l = "";
Actor val_inc Element mw = CS 	String k_${name}l = "";
Actor val_inc Element mw = V1 	String k_${name}l = "";
Actor val_inc Element mw = R1 	String k_${name}l = "";
Actor val_inc Element mw = F1 	String k_${name}l = "";
Actor val_inc Element mw = L1 	String k_${name}l = "";
Actor val_inc Element mw = M1 	String k_${name}l = "";
Actor val_inc2 Element mw = R1 	int k_${name}lp = -1;
Actor val_inc2 Element mw = F1 	int k_${name}lp = -1;
Actor val_inc2 Element mw = L1 	int k_${name}lp = -1;
Actor val_inc2 Element mw = M1 	int k_${name}lp = -1;
Actor val_inc2 Element mw = Q1 	int k_${name}lp = -1;
Actor val_inc2 Element mw = RS 	int k_${name}lp = -1;
Actor val_inc2 Element mw = FS 	int k_${name}lp = -1;
Actor val_inc2 Element mw = LS 	int k_${name}lp = -1;
Actor val_inc2 Element mw = MS 	int k_${name}lp = -1;
Actor val_inc2 Element mw = QS 	int k_${name}lp = -1;
----------------------------------------------------------------
Actor parent_field Comp
----------------------------------------------------------------

C 	int parentp = -1;

----------------------------------------------------------------
Actor from_to Comp
----------------------------------------------------------------


C 	List <Kp${name}c> its${name}l = [];

----------------------------------------------------------------
Actor from_to_doo Comp
----------------------------------------------------------------

C 		if (va[0].compareTo("${name}c") == 0) { // ${}
C 			for(var st in its${name}l) {
C 				if (va.length > 1) {
C 					var ret = st.do_its(glob, va.sublist(1), lno);
C 					if (ret != 0) {
C 						return(ret);
C 					}
C 					continue;
C 				}
C 				var ret = go_act(glob, st);
C 				if (ret != 0) {
C 					return(ret);
C 				}
C 			}
C 			return(0);
C 		}

----------------------------------------------------------------
Actor other_var Ref
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0 && va.length > 1) { // ${} 
C 			for (var st in glob.dats.ap_${parent.name}l) {
C 				if (st.k_${element.name}lp == me) {
C 					return (st.get_var(glob, va.sublist(1), lno) );
C 				}
C 			}
C 		}

----------------------------------------------------------------
Actor other_var2 Ref2
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0 && va.length > 1) { // ${} 
-C 			glob.dats.ap_${parent.name}l.each do |st| {
C 			for (var st in glob.dats.ap_${parent.name}l) {
C 				if (st.k_${element.name}lp == me) {
C 					return (st.get_var(glob, va.sublist(1), lno) );
C 				}
C 			}
C 		}

----------------------------------------------------------------
Actor other_var3 Ref3
----------------------------------------------------------------

C 		if (va[0].compareTo("${parent.name}c_${element.name}l") == 0 && va.length > 1) { // ${} 
-C 			glob.dats.ap_${parent.name}l.each do |st| {
C 			for (var st in glob.dats.ap_${parent.name}l) {
C 				if (st.k_${element.name}lp == me) {
C 					return (st.get_var(glob, va.sublist(1), lno) );
C 				}
C 			}
C 		}



