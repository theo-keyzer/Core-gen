----------------------------------------------------------------
Actor main .
----------------------------------------------------------------

C package main
C 
C import (
C 	"strings"
C )
C
C type ActT struct {
C 	index       map[string]int

All Comp ar

C }
C

-C part of gen;
-C
-C class ActT 
-C {
-C 	Map index = new Map();

-All Comp ar

-C }
-C 

-C bool refs(act)
-C {
-C 	var errs = false;
-C 	var res = fnd(act, '', '', '', '');

-All Comp refs
-All Comp refs2

-C 	return(errs);
-C }
-C

-C List var_all(glob, va, lno) 
-C {
-C 	if (va.length < 3) {
-C 		return( [false, "?" + va.length.toString() + "<3?" + lno + "?"] );
-C 	}

-All Comp var_all

-C 	return( [false, "?" + va[0] + "?" + lno + "?"] );
-C }
-C


-C int do_all(glob, va, lno)
-C {

-All Comp do_all

-C 	print("?No all " + va[0] + " cmd " + "," + lno + "?");
-C 	return 0;
-C }
-C

C func Load(act *ActT, toks string, ln string, pos int, lno string) bool {
C 	ss := strings.Split(toks,".")
C 	tok := ss[0]
C 	flag := ss[1:]

All Comp load

-C 	if tok == "Actor" { doActor(act,ln,pos,lno,flag) }
-C 	if tok == "C" { doC(act,ln,pos,lno,flag) }
C 	return false
C }
C

-C bool load(act, toks, ln, pos, lno)
-C {
-C 	bool errs = false;
-C 	var ss = toks.split(".");
-C 	var tok = ss[0];
-C 	var flag = ss.sublist(1);

-All Comp load

-C 	return(errs);
-C }

----------------------------------------------------------------
Actor ar .
----------------------------------------------------------------

-C 	List<Kp${name:c}> ap_${name:l} = [];
C 	Ap${name:c} [] *Kp${name:c}

----------------------------------------------------------------
Actor load .
----------------------------------------------------------------

C 	if tok == "${name:c}" { _ := load${name:c}(act,ln,pos,lno,flag) }

-C 	if ( tok.compareTo( "${name:c}" ) == 0 ) {
-C 		var comp = new Kp${name:c}();
-C 		var r = comp.load(act, ln, pos, lno, flag);
-C 		if (r == false) {
-C 			errs = true;
-C 		}
-C 		act.ap_${name:l}.add( comp );
-C 	}


-Its Token load_tok

----------------------------------------------------------------
Actor load_tok .
----------------------------------------------------------------

C 	if ( tok.compareTo( "${token}n" ) == 0 ) {
C 		var comp = Kp${.load.name:c}();
C 		var r = comp.load(act, ln, pos, lno, flag);
C 		if (r == false) {
C 			errs = true;
C 		}
C 		act.ap_${.load.name:l}.add( comp );
C 	}

----------------------------------------------------------------
Actor refs Comp parent = Actor
----------------------------------------------------------------

Out delay

C 	for(var st in act.ap_${name:l}) {
		
Its Element refs_act_ele

C 	}

Break

----------------------------------------------------------------
Actor refs .
----------------------------------------------------------------

Out delay

C 	for(var st in act.ap_${name:l}) {
		
Its Element refs_ele

C 	}

----------------------------------------------------------------
Actor refs2 .
----------------------------------------------------------------

Out delay

C 	for(var st in act.ap_${name:l}) {
		
Its Element refs_ele2

C 	}

----------------------------------------------------------------
Actor refs_act_ele . mw in R1,RS
----------------------------------------------------------------

C 		res = fnd(act, "${Ref_element.comp.name:c}_" + st.k_${name:l} , st.k_${name:l},  ".", st.line_no );
C 		st.k_${name:l}p = res[1];
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele . mw in R1,RS
----------------------------------------------------------------

C 		res = fnd(act, "${Ref_element.comp.name:c}_" + get_name(st.names, "${name:l}") , get_name(st.names, "${name:l}"),  "${Ref_element.opt}", st.line_no );
C 		st.k_${name:l}p = res[1];
C 		st.names["k_${name:l}p"] = st.k_${name:l}p.toString();
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele2 . mw in M1,MS
----------------------------------------------------------------

C 		{
C 		var tp = -1;
C 		var ap = st.k_${Ref3_element.element2.name:l}p;
C 		if (ap >= 0) {
C 			tp = act.ap_${Ref3_element.comp_ref.name:l}[ap].k_${Ref3_element.element3.name:l}p;
C 		}
C 		if (tp >= 0) {
C 			res = fnd(act, tp.toString() + "_${Ref3_element.comp.name:c}_" + get_name(st.names, "${name:l}") , get_name(st.names, "${name:l}"),  "${Ref3_element.opt}", st.line_no );
C 			st.k_${name:l}p = res[1];
C 			if (res[0] == false) {
C 				errs = true;
C 			}
C 		} else if ( "${Ref3_element.opt}".compareTo( "?" ) != 0 && get_name(st.names, "${name:l}").compareTo( "${Ref3_element.opt}" ) != 0 ) {
C 			print( "ref error " + st.line_no);
C 			errs = true;
C 		}
C 		st.names["k_${name:l}p"] = st.k_${name:l}p.toString();
C 		}
----------------------------------------------------------------
Actor refs_ele . mw in F1,FS
----------------------------------------------------------------

-C 		r, st.k_${name:l}p = fnd(act, st.k_parentp.toString() + "_${Ref_element.comp.name:c}_" + st.names["${name:l}"] , st.names["${name:l}"],  "${Ref_element.opt}", st.line_no )
C 		res = fnd(act, st.k_parentp.toString() + "_${Ref_element.comp.name:c}_" + get_name(st.names, "${name:l}") , get_name(st.names, "${name:l}"),  "${Ref_element.opt}", st.line_no );
C 		st.k_${name:l}p = res[1];
C 		st.names["k_${name:l}p"] = st.k_${name:l}p.toString();
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele2 . mw in L1,LS
----------------------------------------------------------------

C 		res = fnd(act, st.k_${Ref2_element.element2.name:l}p.toString() + "_${Ref2_element.comp.name:c}_" + get_name(st.names, "${name:l}") , get_name(st.names, "${name:l}"),  "${Ref2_element.opt}", st.line_no );
C 		st.k_${name:l}p = res[1];
C 		st.names["k_${name:l}p"] = st.k_${name:l}p.toString();
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele2 . mw = U0
----------------------------------------------------------------

C 		var t = st.k_${Refu_element.element2:l}p;
C 		if(t >= 0) {
C 			st.k_${name:l}p = act.ap_${Refu_element.comp_ref.name:l}[t].k_${Refu_element.element3:l}p;
C 		} else if ( "${Refu_element.opt}".compareTo( "?" ) != 0 ) {
C 			print( "ref error ${Refu_element.element2:l} not resolved " + st.line_no);
C 			errs = true;
C 		}
C 		st.names["k_${name:l}p"] = st.k_${name:l}p.toString();

----------------------------------------------------------------
Actor refs_ele2 . mw in Q1,QS
----------------------------------------------------------------

C 		{
C 		var tp = -1;
C 		var ap = st.k_parentp;
C 		if (ap >= 0) {
C 			tp = act.ap_${Refq_element.comp_ref.name:l}[ap].k_${Refq_element.element2.name:l}p;
C 		}
C 		if (tp >= 0) {
C 			res = fnd(act, tp.toString() + "_${Refq_element.comp.name:c}_" + get_name(st.names, "${name:l}") , get_name(st.names, "${name:l}"),  "${Refq_element.opt}", st.line_no );
C 			st.k_${name:l}p = res[1];
C 			if (res[0] == false) {
C 				errs = true;
C 			}
C 		} else if ("${Refq_element.opt}".compareTo( "?" ) != 0 && get_name(st.names, "${name:l}").compareTo( "${Refq_element.opt}") != 0) {
C 			print( "ref error " + st.line_no );
C 			errs = true;
C 		}
C 		st.names["k_${name:l}p"] = st.k_${name:l}p.toString();
C 		}

----------------------------------------------------------------
Actor var_all Comp find = Find
----------------------------------------------------------------

C 	if (va[0].compareTo("${name:c}") == 0) {
C 		var en = glob.dats.index["${name:c}_" + va[1] ];
C 		if(en != null) {
C 			return (glob.dats.ap_${name:l}[en].get_var(glob, va.sublist(2), lno));
C 		}
C 		return( [false, "?" + va[0] + "=" + va[1] + "?" + lno + "?"] );
C 	}
	
----------------------------------------------------------------
Actor do_all Comp parent != Actor
----------------------------------------------------------------

C 	if (va[0].compareTo("${name:c}") == 0) {
C 		if (va.length > 1 && va[1].length > 0) {
C 			var en = glob.dats.index["${name:c}_" + va[1] ];
C 			if (en != null) {
C 				if (va.length > 2) {
C 					return( glob.dats.ap_${name:l}[en].do_its(glob, va.sublist(2), lno) );
C 				}
C 				return( go_act(glob, glob.dats.ap_${name:l}[en]) );
C 			}
C 			return(0);
C 		}
C 		for(var st in glob.dats.ap_${name:l}) {
C 			if (va.length > 2) {
C 				var ret = st.do_its(glob, va.sublist(2), lno);
C 				if (ret != 0) {
C 					return(ret);
C 				}
C 				continue;
C 			}
C 			var ret = go_act(glob, st);
C 			if (ret != 0) {
C 				return(ret);
C 			}
C 		}
C 		return(0);
C 	}


----------------------------------------------------------------
Actor do_all_ele Element name = name
----------------------------------------------------------------

C 			if b != "" { if st.kname != b { continue; } }


