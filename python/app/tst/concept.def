----------------------------------------------------------------
Concept intro
----------------------------------------------------------------

Topic . 1 h1 Introduction

T . It converts the input to output.

----------------------------------------------------------------
Concept actor
----------------------------------------------------------------

Topic . 1 h2 Actors

T . The actor node has a list of commands to run.
T . It uses a data node or object passed.
T . The actor has a match condition.

Topic var 2 p Actor variables.

T . The actor match has access to the same variables as the commands in the actor has.
T . The match is string based.
T . The idea is to have a separate match function for the node option that compares data objects.

Topic flow 2 p Actor flow.

T . Multiple actors of the same name can match, and the Break command stops any further matches.

Topic cmd 2 p Actor commands.

T . The Du, All, Its, This and That commands call other actors.

Topic run 2 p Actor function.

T . The go_act function in the run-time engine processes the actor call.
T . It calls the go_cmds function to process the command list.

Topic gen 2 p Actor generated.

T . The generated code for the actors is the loader and data classes.
T . No runtime code is generated for this.

----------------------------------------------------------------
Concept cmd
----------------------------------------------------------------

Topic . 1 h2 The Commands

T . The command nodes.

Topic gen 2 p Command generated.

T . The generated code for the cmds is the loader and data classes.
T . No runtime code is generated for this.

Topic cmd 2 p Actor commands.

T . The commands has access to the variables and functions in the node object of the actor.

----------------------------------------------------------------
Concept node
----------------------------------------------------------------

Topic . 1 h2 Data Nodes

T . The data nodes.

Topic var 2 p Node variables.

T . The variables are the node items.
T . Or node items related via a path.

Topic var 2 p Node commands.

T . The Its command gets other related nodes via a path.

Topic run 2 p Node functions.

T . The get_var function in the generated code get the values for the varaiables.
T . The do_its function there calls the go_act function with a related node.

Topic gen 2 p Node generated.

T . The generated code for the nodes is the loader, data classes and run-time functions.

Topic flow 2 p Node flow.

T . The code in the nodes can chain to other node functions.
T . A path is passed for the route.
T . The returned code can end loops.

----------------------------------------------------------------
Concept options
----------------------------------------------------------------

Topic . 1 h2 Node options

T . Command node options is specified like Add.me.break.
T . This is separated to the Add token and a list with the rest.
T . Data node options is the same.
T . This is to add extra options to a node without changing the input file format.
T . Options do not have a value, but can be parsed later on.

Topic cmd 2 p Option commands.

T . The command is Its options.

Topic var 2 p Option variables.

T . The variable name is options.

----------------------------------------------------------------
Concept collections
----------------------------------------------------------------

Topic . 1 h2 Collection Nodes

T . The collection nodes.
T . Any data can be added here.
T . It has a dict for var, set and list.
T . The Add command can also add to the current node (me), or to a path to a node (node).
T . That is if it is a dict or a list.

Topic cmd 2 p Commands.

T . They are Add, Clear, Check and This.
T . The This command is also path driven like the Its command.
T . The This command uses the var, set and list as starting point whereas the Its command uses the current node to start.

Topic cmd 2 p Areas.

T . They are var, list, set, node and me to specify where to add.

Topic cmd 2 p Options.

T . They are me, node, json, eval and strs to specify what to add. It defaults to the string provided.
T . The break is to break out of the actor loop for duplicates.
T . Its also sets a break flag for the Break command to use for advanced breaks.

Topic cmd 3 p Option node.

T . This is add a node object versus a string of it.
T . Not as complete as the variable names.

Topic cmd 3 p Option me.

T . This is to add the current object.

Topic cmd 4 p Option strs.

T . The string value is processed via the strs function to replace variable names.
T . The result is passed to the strs function again to further replace variable names.
T . This is for when a variable has a variable name in it.

Topic var 2 p Variables.

T . For debugging, ._list.D, ._set.D
T . For the var.D it is _.D
T . If the var is a data node, it works the same as the data node.
T . If the var is a dict, it is the dict items.
T . A dict var can have data nodes in it.
T . The path is then via the dict into the data node.

----------------------------------------------------------------
Concept json
----------------------------------------------------------------

Topic . 1 h2 Json Nodes

T . The json nodes is converted to python nodes.
T . The are dict, list and objects.

Topic cmd 2 p Json commands.

T . They are Add.json, That json

Topic var 2 p Json variables.

T . The variables are the dict items.
T . Or nested dict items via a path.

----------------------------------------------------------------
Concept gen
----------------------------------------------------------------

Topic . 1 h2 Code generation.

T . Metrics.

Topic gen 2 p Size.

T . If the input def and actor file size is larger than the generated code, it is a wast of time to build and maintain the system.

Topic gen 2 p Time.

T . Write twice. Write the code and then see how to generate it.
T . No point if it is used once.
T . If it is to expand a system, then it is just to see how to generate it.

Topic gen 2 p Scope changes.

T . If the scope of the project changes a lot, it make sense to even generate hard coded files.
T . It becomes easier to re-generate the whole project than to modify parts of it every time.
T . This where the most errors seem to happen.

Topic gen 2 p Business logic.

T . The actor deal with the general logic with some exceptions.
T . This is hard to define as it relates to too many areas.
T . Better to just code it or hard code the actors for this.
T . An example of this is form_validate.a in the java. Maybe it can be better.
T . In short, do not waist time on it. In long, it may interest you to define it.

Topic gen 2 p Refine and optimize.

T . In a a large system less effort is done to make it better.
T . The generator is better at refactoring as it reaches a larger area.
T . If this code can do this, then this code can use it like this.

Topic gen 2 p Complexity.

T . The actors break down complexity into small parts.
T . So it can build larger complex systems.

Topic gen 2 p Memory.

T . The actors have a good memory how to build.
T . Its like generating employees.

Topic gen 2 p Code.

T . The code generated is fragments of hand written code.
T . It is no obscure mess.
T . It gets reviewed, tested and handed over.

Topic gen 2 p Handover.

T . The code is handed over to the maintenance team.
T . The generator is a personal tool and they have no interest or skill in learning it.

Topic gen p Project.

T . Projects to generate are rare, so it is hard to see if it is worth the effort.
T . With enough skill, all projects can be generated.
T . Every project expands the generator to build the system.
T . This make the generator more capable to build a new generator.

----------------------------------------------------------------
Concept process
----------------------------------------------------------------

Topic . 1 h2 Process

T . The build process

Topic flow 2 p Robot

T . The run-rime engine is the the lab robot.
T . The robot knows where to find items as part of the run-time is generated.
T . The input def files has the ingredients.
T . The actor files has the formula for the mixing and instuctions for the robot.

Topic flow 2 p Nodes.

T . Takes notes.
T . Separate the formulas from the ingredients.
T . Start the lab tests.

----------------------------------------------------------------
Concept concept
----------------------------------------------------------------

Topic . 1 h2 Concept

T . The concept process

Topic concept 2 p Topic.

T . A document is build for every topic based on its name.
T . The document links to a section based on the concept to other documents.
T . The content is shared to all topic files if the topic name is (.)
T . The content is shared to all topic files within the nested level group if the topic name is (_).

Topic concept 2 p Build.

T . The topic name is given to build the document.
T . Multiple topics can be combined like var,cmd.
T . All topics can be combined with (*).
T . The import is given to import the files or not.

Topic concept 2 p Concept.

T . Some of the topics can be concepts.
T . This is to create links to simular concepts.
T . The links can then be to relate concepts and topics.


