----------------------------------------------------------------
Actor main .
----------------------------------------------------------------

C import structs
C 
C from inputs import Input
C
C def refs(act) -> bool:
C     err = False
C     err = ref(act)
C     er, cnt = ref_other(act, True)
C     err = err or er
C     return err
C
C def refs_multi_pass(act) -> bool:
C     err = ref(act)
C     prev = 1000
C     for i in range(0,6):
C         er, cnt = ref_other(act, False)
C         if cnt == 0 or cnt == prev:
C             break
C         prev = cnt
C     er, cnt = ref_other(act, True)
C     err = err or er
C     return err
C
C def load(act, ff: Input, tok: str, ln: int, lno: str):

All Comp load

C
C def ref(act) -> bool:
C     err = False

All Comp refs

C     return(err)
C
C def ref_other(act, check: bool) -> (bool, int):
C     err = False
C     cnt = 0

All Comp refs_other

C     return(err,cnt)
C

----------------------------------------------------------------
Actor load .
----------------------------------------------------------------

C         if tok == "${name}c":
C             kp = structs.Kp${name}c(ff, ln, act, lno)
C             act.ap_${name}l.append(kp)
C             act.kp_all.append(kp)

----------------------------------------------------------------
Actor refs . parent.name = Actor
----------------------------------------------------------------

Out delay

C     for i in range( len(act.ap_${name}l) ):
		
Its Element refs_ele_act

C

Break

----------------------------------------------------------------
Actor refs .
----------------------------------------------------------------

Out delay

C     for i in range( len(act.ap_${name}l) ):
		
Its Element refs_ele

C

----------------------------------------------------------------
Actor refs_other Comp
----------------------------------------------------------------

Out delay

C     for i in range( len(act.ap_${name}l) ):
C         t = -2
		
Its Element refs_ele_other

C

----------------------------------------------------------------
Actor refs_ele_act . mw = R1
----------------------------------------------------------------

C         try:
C             act.ap_${parent.name}l[i].k_${name}lp = -2
C             p = act.ap_${parent.name}l[i].k_${name}l
C             act.ap_${parent.name}l[i].k_${name}lp = act.index["${Ref_element.comp.name}c_" + p]
C         except:
C             if "${Ref_element.opt} " != ".":
C                 err = True
C                 print("${Ref_element.comp.name}c_" + p + " not found " + act.ap_${parent.name}l[i].line_no)

----------------------------------------------------------------
Actor refs_ele . mw in R1,RS
----------------------------------------------------------------

C         try:
C             act.ap_${.refs.name}l[i].k_${name}lp = -2
C             p = act.ap_${.refs.name}l[i].names[ "${name}l" ]
C             act.ap_${.refs.name}l[i].k_${name}lp = act.index["${Ref_element.comp.name}c_" + p]
C         except:
C             if "${Ref_element.opt} " != ".":
C                 err = True
C                 print("${Ref_element.comp.name}c_" + p + " not found " + act.ap_${parent.name}l[i].line_no)

----------------------------------------------------------------
Actor refs_ele . mw in F1,FS
----------------------------------------------------------------

C         try:
C             act.ap_${.refs.name}l[i].k_${name}lp = -2
C             p = act.ap_${.refs.name}l[i].names[ "${name}l" ]
C             act.ap_${.refs.name}l[i].k_${name}lp = act.index[ str(act.ap_${.refs.name}l[i].parentp) + "_${Ref_element.comp.name}c_" + p]
C         except:
C             if "${Ref_element.opt} " != ".":
C                 err = True
C                 print( str(act.ap_${.refs.name}l[i].parentp) + "_${Ref_element.comp.name}c_" + p + " not found " + act.ap_${parent.name}l[i].line_no)

----------------------------------------------------------------
Actor refs_ele_other . mw in L1,LS
----------------------------------------------------------------

C         try:
C             t = act.ap_${.refs_other.name}l[i].k_${Ref2_element.element2.name}lp
C             if t == -1:
C                 cnt = cnt + 1
C                 if check:
C                     err = True
C                     print( "${Ref2_element.element2.name}l not resolved " + act.ap_${parent.name}l[i].line_no)
C             else:
C                 act.ap_${.refs_other.name}l[i].k_${name}lp = -2
C             p = act.ap_${.refs_other.name}l[i].names[ "${name}l" ]
C             act.ap_${.refs_other.name}l[i].k_${name}lp = act.index[ str(t) + "_${Ref2_element.comp.name}c_" + p]
C         except:
C             if "${Ref2_element.opt} " != ".":
C                 if check:
C                     err = True
C                     print( str(t) + "_${Ref2_element.comp.name}c_" + p + " not found " + act.ap_${parent.name}l[i].line_no)

----------------------------------------------------------------
Actor refs_ele_other . mw in U0
----------------------------------------------------------------

C         try:
C             t = act.ap_${.refs_other.name}l[i].${Refu_element.element2.name}l
C             if t == -1:
C                 cnt = cnt + 1
C                 if check:
C                     err = True
C                     print( "${Refu_element.element2.name}l not resolved " + act.ap_${parent.name}l[i].line_no)
C             else:
C                 act.ap_${.refs_other.name}l[i].k_${name}lp = -2
C             act.ap_${.refs_other.name}l[i].k_${name}lp = act.ap_${Refu_element.comp_ref.name}l[t].${Refu_element.element3.name}l
C         except:
C             if "${Refu_element.opt} " != ".":
C                 if check:
C                     err = True
C                     print( "${Refu_element.element2.name}l = " + str(t) + " " + act.ap_${parent.name}l[i].line_no)


