----------------------------------------------------------------
Actor main .
----------------------------------------------------------------

C class ActT {

All Comp ar

C }
C 

C func var_all(_ a: String, _ b:String, _ ln: String) -> (ok: Bool, val: String) {
C 	let ss = split(b);

All Comp var_all

C 	return(false, "?" + a + "?" + "," + ln + ", var_all?");
-C 	return("?---?");
C }
C


C func do_all(_ a: String, _ b: String, _ c: String, _ act: String, _ args: String, _ ln: String) -> Int {

All Comp do_all

C 	print("? No all " + a + " cmd " + "," + ln + "?");
C 	return 0;
C }
C

All Comp struct

----------------------------------------------------------------
Actor ar .
----------------------------------------------------------------

C 	var ap_${name}l: [Kp${name}c] = [];

----------------------------------------------------------------
Actor var_all Comp find = Find
----------------------------------------------------------------

C 	if a == "${name}c" { // ${} 
C 		if let en = Dict[ "${name}c_" + ss.a ] {
C 			let ss2 = split(ss.b);
C 			return Def.ap_${name}l[en].get_var(ss2.a, ss2.b, ln);
C 		}
C 		return(false, "?" + a + "=" + ss.a + "?" + "," + ln + "?");
C 	}
	
----------------------------------------------------------------
Actor do_all Comp parent != Actor
----------------------------------------------------------------

C 	if a == "${name}c" {  // ${} 
C 		for st in Def.ap_${name}l
C 		{

Its Element do_all_ele

C 			let ret = actor( act, args, st );
C 			if ret != 0 { return ret-1; }
C 		}
C 		return 0;
C 	}

----------------------------------------------------------------
Actor do_all_ele Element name = name
----------------------------------------------------------------

C 			if b != "" { if st.kname != b { continue; } }

----------------------------------------------------------------
Actor struct Comp name = Actor
----------------------------------------------------------------

D ${name}c struct

C class Kp${name}c : Kp {

Its parent parent_field
Its Element val_inc
Its Element val_inc2

C 	var kchilds: [Kp] = [];
C }
C

----------------------------------------------------------------
Actor struct Comp name != Actor
----------------------------------------------------------------

D ${name}c struct

-Its star star

C class Kp${name}c : Kp {

Its parent parent_field
Its Element val_inc
Its Element val_inc2
Its Comp_parent from_to
Its Element val_inc_d

C 	var kchilds: [Kp] = [];

Du struct_du

C }
C


----------------------------------------------------------------
Actor struct_du Comp parent != Actor
----------------------------------------------------------------

C 	override func doo(_ a: String, _ b: String, _ act: String, _ args: String, _ ln: String) -> Int {
C 		let ss = split(b);
C 		if a == "Child" {
C 			for st in kchilds {
C 				let ret = actor( act, args, st );
C 				if ret != 0 { return ret-1; }
C 			}
C 			return 0;
C 		}

Its Comp_parent from_to_doo
Its parent parent_field_func
Its Ref ref_func
Its Ref2 ref_func2
Its Ref_comp other_func
Its Ref2_comp other_func2

C 		if a == ss.a {
C 			print("?No its " + a + " cmd for " + kline + "," + ln + "?");
C 		} else {
C 			print("?No its " + ss.a + " or " + a + " cmd for " + kline + "," + ln + "?");
C 		}
C 		return 0;
C 	}
C 	override func get_var(_ a: String, _ b:String, _ ln: String) -> (ok: Bool, val: String) {
-C 		let ss = split(b);

Its Ref ref_var
Its Ref2 ref_var2
Its parent parent_field_var
Its Ref_comp other_var
Its Ref2_comp other_var2
Its Comp_parent find

C 		if let v = names[ a ] { return (true, v) }
C 		return(false, "?" + a + "?" + kline + "," + ln + ",${name} ?");
C 	}

----------------------------------------------------------------
Actor find Comp find = FindIn
----------------------------------------------------------------

Its Element ele_name_in

----------------------------------------------------------------
Actor ele_name_in . name = name
----------------------------------------------------------------

C 		if a == "${.find.name}c" { // ${} 
C 			let ss = split(b);
C 			if let en = Dict[ String(kid) + "_${.find.name}c_" + ss.a ] {
C 				let ss2 = split(ss.b);
C 				return Def.ap_${.find.name}l[en].get_var(ss2.a, ss2.b, ln);
C 			}
C 			return(false, "?" + a + "=" + ss.a + "?" + kline + "," + ln + "?");
C 		}

----------------------------------------------------------------
Actor ref_func Ref
----------------------------------------------------------------

C 		if a == "${element.name}l" { // ${} 
C 			if k${element.name}lp >= 0 {
C 				if b == "" {
C 					return actor(act, args, Def.ap_${comp.name}l[k${element.name}lp]);
C 				}
C 				let ss = split(b);
C 				return Def.ap_${comp.name}l[k${element.name}lp].doo(ss.a, ss.b, act, args, ln);
C 			}
C 			return 0;
C 		}

----------------------------------------------------------------
Actor ref_func2 Ref2
----------------------------------------------------------------

C 		if a == "${element.name}l" { // ${} 
C 			if k${element.name}lp >= 0 {
C 				if b == "" {
C 					return actor(act, args, Def.ap_${comp.name}l[k${element.name}lp]);
C 				} 
C 				let ss = split(b);
C 				return Def.ap_${comp.name}l[k${element.name}lp].doo(ss.a, ss.b, act, args, ln);
C 			}
C 			return 0;
C 		}

----------------------------------------------------------------
Actor parent_field_func Comp
----------------------------------------------------------------

C 		if a == "parent" { // ${} 
C 			if parentp >= 0 {
C 				if b == "" {
C 					return actor(act, args, Def.ap_${name}l[parentp]);
C 				}
C 				let ss = split(b);
C 				return Def.ap_${name}l[parentp].doo(ss.a, ss.b, act, args, ln );
C 			}
C 		}

----------------------------------------------------------------
Actor parent_field_var Comp
----------------------------------------------------------------

C 		if a == "parent" { // ${} 
C 			if parentp >= 0 {
C 				let ss = split(b);
C 				return Def.ap_${name}l[parentp].get_var(ss.a, ss.b, ln );
C 			}
C 		}

----------------------------------------------------------------
Actor other_func Ref
----------------------------------------------------------------

C 		if a == "${parent.name}c_${element.name}l" { // ${} 
C 			for st in Def.ap_${parent.name}l {
C 				if st.k${element.name}lp != kid { continue }
C 				if b == "" {
C 					let ret = actor(act, args, st);
C 					if ret != 0 { return ret-1; }
C 					continue;
C 				}
C 				let ret = st.doo(ss.a, ss.b, act, args, ln);
C 				if ret != 0 { return ret-1; }
C 			}
C 			return 0;
C 		}

----------------------------------------------------------------
Actor other_func2 Ref2
----------------------------------------------------------------

C 		if a == "${parent.name}c_${element.name}l" { // ${} 
C 			for st in Def.ap_${parent.name}l {
C 				if st.k${element.name}lp != kid { continue }
C 				let ret = actor(act, args, st);
C 				if ret != 0 { return ret-1; }
C 			}
C 			return 0;
C 		}
C 		if a == "${parent.name}c_${element2.name}l" { // ${} 
C 			for st in Def.ap_${parent.name}l {
C 				if st.k${element2.name}lp != kid { continue }
C 				let ret = actor(act, args, st);
C 				if ret != 0 { return ret-1; }
C 			}
C 			return 0;
C 		}

----------------------------------------------------------------
Actor ref_var Ref
----------------------------------------------------------------

C 		if a == "${element.name}l" { // ${} 
C 			if k${element.name}lp >= 0 {
C 				let ss = split(b);
C 				return Def.ap_${comp.name}l[k${element.name}lp].get_var(ss.a, ss.b, ln);
C 			}
C 		}

----------------------------------------------------------------
Actor ref_var2 Ref2
----------------------------------------------------------------

C 		if a == "${element.name}l" { // ${} 
C 			if k${element.name}lp >= 0 {
C 				let ss = split(b);
C 				return Def.ap_${comp.name}l[k${element.name}lp].get_var(ss.a,ss.b, ln);
C 			}
C 		}

----------------------------------------------------------------
Actor star Star
----------------------------------------------------------------

D 	* ${doc} 

----------------------------------------------------------------
Actor val_inc_d Element
----------------------------------------------------------------

D 	${name}l * ${doc} 

----------------------------------------------------------------
Actor val_inc Element mw = C1 	var k${name}l: String = "";
Actor val_inc Element mw = V1 	var k${name}l: String = "";
Actor val_inc Element mw = I1 	var k${name}l: Int = 0;
Actor val_inc Element mw = P1 	var k${name}l: Int = 0;
Actor val_inc Element mw = D1 	var k${name}l: Int = 0;
Actor val_inc Element mw = R1 	var k${name}l: String = "";
Actor val_inc Element mw = F1 	var k${name}l: String = "";
Actor val_inc Element mw = L1 	var k${name}l: String = "";
Actor val_inc Element mw = M1 	var k${name}l: Int = 0;
Actor val_inc Element mw = A1 	var k${name}l: Int = 0;
Actor val_inc2 Element mw = R1 	var k${name}lp: Int = -1;
Actor val_inc2 Element mw = F1 	var k${name}lp: Int = -1;
Actor val_inc2 Element mw = L1 	var k${name}lp: Int = -1;
----------------------------------------------------------------
Actor parent_field Comp
----------------------------------------------------------------

-C 	var up: Kp${name}c = Kp${name}c();
C 	var parent: String = "";
C 	var parentp: Int = -1;

----------------------------------------------------------------
Actor from_to Comp
----------------------------------------------------------------

C 	var its${name}l: [Kp${name}c] = [];

----------------------------------------------------------------
Actor from_to_doo Comp
----------------------------------------------------------------

C 		if a == "${name}c" { // ${} 
C 			for st in its${name}l {
C 				if b == "" {
C 					let ret = actor(act, args, st);
C 					if ret != 0 { return ret-1; }
C 					continue;
C 				}
C 				let ret = st.doo(ss.a, ss.b, act, args, ln);
C 				if ret != 0 { return ret-1; }
C 			}
C 			return 0;
C 		}

----------------------------------------------------------------
Actor other_var Ref
----------------------------------------------------------------

C 		if a == "${parent.name}c_${element.name}l" { // ${} 
C 			for st in Def.ap_${parent.name}l {
C 				if st.k${element.name}lp != kid { continue }
C 				let ss = split(b);
C 				return st.get_var(ss.a, ss.b, ln );
C 			}
C 		}

----------------------------------------------------------------
Actor other_var2 Ref2
----------------------------------------------------------------

C 		if a == "${parent.name}c_${element.name}l" { // ${} 
C 			for st in Def.ap_${parent.name}l {
C 				if st.k${element.name}lp != kid { continue }
C 				let ss = split(b);
C 				return st.get_var(ss.a, ss.b, ln );
C 			}
C 		}
-C 		if a == "${parent.name}c_${element2.name}l" { // ${} 
-C 			for st in Def.ap_${parent.name}l {
-C 				if st.k${element2.name}lp != kid { continue }
-C 				let ss = split(b);
-C 				return st.get_var(ss.a, ss.b, ln );
-C 			}
-C 		}


