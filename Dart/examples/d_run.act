----------------------------------------------------------------
Actor main .
----------------------------------------------------------------

C part of gen;
C
C class ActT 
C {
C 	Map index = new Map();

All Comp ar

C }
C 

C bool refs(act)
C {
C 	var errs = false;
C 	var res = fnd(act, '', '', '', '');

All Comp refs
All Comp refs2

C 	return(errs);
C }
C

C List var_all(glob, va, lno) 
C {
C 	if (va.size < 3) {
C 		return( [false, "?" + va.size.toString() + "<3?" + lno + "?"] );
C 	}

-All Comp var_all

C 	return( [false, "?" + va[0] + "?" + lno + "?"] );
C }
C


C int do_all(glob, va, lno)
C {

All Comp do_all

C 	print("?No all " + va[0] + " cmd " + "," + lno + "?");
C 	return 0;
C }
C
C bool load(act, tok, ln, pos, lno)
C {
C 	bool errs = false;

All Comp load

C 	return(errs);
C }

----------------------------------------------------------------
Actor ar .
----------------------------------------------------------------

C 	List<Kp${name}c> ap_${name}l = [];

----------------------------------------------------------------
Actor load .
----------------------------------------------------------------

C 	if ( tok.compareTo( "${name}c" ) == 0 ) {
C 		var comp = new Kp${name}c();
C 		var r = comp.load(act, ln, pos, lno);
C 		if (r == false) {
C 			errs = true;
C 		}
C 		act.ap_${name}l.add( comp );
C 	}


Its Token load_tok

----------------------------------------------------------------
Actor load_tok .
----------------------------------------------------------------

C 	if ( tok.compareTo( "${token}n" ) == 0 ) {
C 		var comp = Kp${.load.name}c();
C 		var r = comp.load(act, ln, pos, lno);
C 		if (r == false) {
C 			errs = true;
C 		}
C 		act.ap_${.load.name}l.add( comp );
C 	}

----------------------------------------------------------------
Actor refs Comp parent = Actor
----------------------------------------------------------------

Out delay

C 	for(var st in act.ap_${name}l) {
		
Its Element refs_act_ele

C 	}

Break

----------------------------------------------------------------
Actor refs .
----------------------------------------------------------------

Out delay

C 	for(var st in act.ap_${name}l) {
		
Its Element refs_ele

C 	}

----------------------------------------------------------------
Actor refs2 .
----------------------------------------------------------------

Out delay

C 	for(var st in act.ap_${name}l) {
		
Its Element refs_ele2

C 	}

----------------------------------------------------------------
Actor refs_act_ele . mw in R1,RS
----------------------------------------------------------------

-C 		r, st.k_${name}lp = fnd(act, "${Ref_element.comp.name}c_" + st.k_${name}l , st.k_${name}l,  ".", st.line_no );
C 		res = fnd(act, "${Ref_element.comp.name}c_" + st.k_${name}l , st.k_${name}l,  ".", st.line_no );
C 		st.k_${name}lp = res[1];
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele . mw in R1,RS
----------------------------------------------------------------
-get_name(names, "name")
-C 		r, st.k_${name}lp = fnd(act, "${Ref_element.comp.name}c_" + st.names["${name}l"] , st.names["${name}l"],  "${Ref_element.opt} ", st.line_no )
C 		res = fnd(act, "${Ref_element.comp.name}c_" + get_name(st.names, "${name}l") , get_name(st.names, "${name}l"),  "${Ref_element.opt} ", st.line_no );
C 		st.k_${name}lp = res[1];
C 		st.names["k_${name}lp"] = st.k_${name}lp.toString();
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele2 . mw in M1,MS
----------------------------------------------------------------

C 		tp = -1
C 		ap = st.k_${Ref3_element.element2.name}lp
C 		if ap >= 0
C 			tp = act.ap_${Ref3_element.comp_ref.name}l[ap].k_${Ref3_element.element3.name}lp
C 		end
C 		if tp >= 0
C 			r, st.k_${name}lp = fnd(act, tp.toString() + "_${Ref3_element.comp.name}c_" + st.names["${name}l"] , st.names["${name}l"],  "${Ref3_element.opt} ", st.line_no )
C 			if r == false
C 				errs = true;
C 			end
C 		elsif "${Ref3_element.opt} " != "?" && st.names["${name}l"] != "${Ref3_element.opt} "
C 			puts "ref error " + st.line_no
C 			errs = true;
C 		end
C 		st.names["k_${name}lp"] = st.k_${name}lp.toString();

----------------------------------------------------------------
Actor refs_ele . mw in F1,FS
----------------------------------------------------------------

-C 		r, st.k_${name}lp = fnd(act, st.parentp.toString() + "_${Ref_element.comp.name}c_" + st.names["${name}l"] , st.names["${name}l"],  "${Ref_element.opt} ", st.line_no )
C 		res = fnd(act, st.parentp.toString() + "_${Ref_element.comp.name}c_" + get_name(st.names, "${name}l") , get_name(st.names, "${name}l"),  "${Ref_element.opt} ", st.line_no );
C 		st.k_${name}lp = res[1];
C 		st.names["k_${name}lp"] = st.k_${name}lp.toString();
C 		if (res[0] == false) {
C 			errs = true;
C 		}

----------------------------------------------------------------
Actor refs_ele2 . mw in L1,LS
----------------------------------------------------------------

C 		r, st.k_${name}lp = fnd(act, st.k_${Ref2_element.element2.name}lp.toString() + "_${Ref2_element.comp.name}c_" + st.names["${name}l"] , st.names["${name}l"],  "${Ref2_element.opt} ", st.line_no )
C 		st.names["k_${name}lp"] = st.k_${name}lp.toString();
C 		if r == false
C 			errs = true;
C 		end

----------------------------------------------------------------
Actor refs_ele2 . mw in Q1,QS
----------------------------------------------------------------

C 		tp = -1
C 		ap = st.parentp
C 		if ap >= 0
C 			tp = act.ap_${Refq_element.comp_ref.name}l[ap].k_${Refq_element.element2.name}lp
C 		end
C 		if tp >= 0
C 			r, st.k_${name}lp = fnd(act, tp.toString() + "_${Refq_element.comp.name}c_" + st.names["${name}l"] , st.names["${name}l"],  "${Refq_element.opt} ", st.line_no )
C 			if r == false
C 				errs = true;
C 			end
C 		elsif "${Refq_element.opt} " != "?" && st.names["${name}l"] != "${Refq_element.opt} "
C 			puts "ref error " + st.line_no
C 			errs = true;
C 		end
C 		st.names["k_${name}lp"] = st.k_${name}lp.toString();

----------------------------------------------------------------
Actor var_all Comp find = Find
----------------------------------------------------------------

C 	if va[0] == "${name}c" # ${} 
C 		if en = glob.dats.index["${name}c_" + va[1] ]?
C 			return (glob.dats.ap_${name}l[en].get_var(glob, va[2..], lno))
C 		end
C 		return(false, "?" + va[0] + "=" + va[1] + "?" + lno + "?")
C 	end
	
----------------------------------------------------------------
Actor do_all Comp parent != Actor
----------------------------------------------------------------

C 	if (va[0].compareTo("${name}c") == 0) {
C 		if (va.length > 1 && va[1].length > 0) {
C 			var en = glob.dats.index["${name}c_" + va[1] ];
C 			if (en != null) {
C 				if (va.length > 2) {
C 					return( glob.dats.ap_${name}l[en].do_its(glob, va.sublist(2), lno) );
C 				}
C 				return( go_act(glob, glob.dats.ap_${name}l[en]) );
C 			}
C 			return(0);
C 		}
C 		for(var st in glob.dats.ap_${name}l) {
C 			if (va.length > 2) {
C 				var ret = st.do_its(glob, va.sublist(2), lno);
C 				if (ret != 0) {
C 					return(ret);
C 				}
C 				continue;
C 			}
C 			var ret = go_act(glob, st);
C 			if (ret != 0) {
C 				return(ret);
C 			}
C 		}
C 		return(0);
C 	}


----------------------------------------------------------------
Actor do_all_ele Element name = name
----------------------------------------------------------------

C 			if b != "" { if st.kname != b { continue; } }
