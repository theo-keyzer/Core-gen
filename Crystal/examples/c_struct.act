----------------------------------------------------------------
Actor main .
----------------------------------------------------------------

C require "./*"
C
C class Kp
C 	property me : Int32 = -1
C 	property comp : String = "Kp"
C 	property line_no : String = ""
C 	property names : Hash(String, String) = Hash(String, String).new
C 	def do_its(glob, va, lno)
C 		puts("?No its " + va[0] + " cmd for Kp," + lno + "?");
C 		return(0)
C 	end
C
C 	def get_var(glob, va, lno)
C 		if v = names[ va[0] ]?
C 			return(true, v )
C 		end
C 		return(false, "?" + va[0] + "?" + line_no + "," + lno + ",Kp?");
C 	end
C end
C


All Comp struct

----------------------------------------------------------------
Actor struct Comp name = Actor
----------------------------------------------------------------

D ${name}c struct

C class Kp${name}c < Kp 

Its parent parent_field
Its Element val_inc
Its Element val_inc2

C 	property childs : Array(Kp) = Array(Kp).new
C 	def load(act, ln, pos, lno)
C 		p = pos
C 		@comp = "${name}c"
C 		@line_no = lno
C 		@me = act.ap_${name}l.size

Its Element ele_act
Its parent parent_field_p
Du index_act

C 		return true
C 	end
C end
C

Break

----------------------------------------------------------------
Actor struct Comp parent = Actor
----------------------------------------------------------------

D ${name}c struct

C class Kp${name}c < Kp 

Its parent parent_field
Its Element val_inc
Its Element val_inc2

C 	property childs : Array(Kp) = Array(Kp).new
C 	def load(act, ln, pos, lno)
C 		p = pos
C 		@comp = "${name}c"
C 		@line_no = lno
C 		@me = act.ap_${name}l.size

Its Element ele_act
Its parent parent_field_p

C 		return true
C 	end
C end
C

Break

----------------------------------------------------------------
-Actor struct Comp name != Actor
Actor struct Comp
----------------------------------------------------------------

C class Kp${name}c < Kp 

Its parent parent_field
Its Element val_inc2
Its Comp_parent from_to
Its Element val_inc_d
Its Comp_parent childs

C
C 	def load(act, ln, pos, lno)
C 		p = pos
C 		@comp = "${name}c"
C 		@line_no = lno
C 		@me = act.ap_${name}l.size
C 		@names["k_me"] = @me.to_s
C 		@names["k_parent"] = "-1"

Its Element ele
Its parent parent_field_p
Du index

C 		return true
C 	end
C
C 	def get_var(glob, va, lno)

Its Ref ref_var
Its Ref2 ref_var2
Its Ref3 ref_var3
Its parent parent_field_var
Its Ref_comp other_var
Its Ref2_comp other_var2
Its Ref3_comp other_var3
Its Comp_parent find

C 		if v = names[ va[0] ]?
C 			return(true, v )
C 		end
C 		if va[0] == "comp"
C 			return(true, comp )
C 		end
C 		return(false, "?" + va[0] + "?" + line_no + "," + lno + ",${name} ?");
C 	end
C
C 	def do_its(glob, va, lno)

Its Comp_parent from_to_doo
Its parent parent_field_func
Its Ref ref_func
Its Ref2 ref_func2
Its Ref3 ref_func3
Its Ref_comp other_func
Its Ref2_comp other_func2
Its Ref3_comp other_func3

C 		if va[0] == "Child" # ${}

Its Comp_parent childs_func

C 			return(0)
C 		end

C 		puts("?No its " + va[0] + " cmd for ${name} ," + line_no + "," + lno + "?");
C 		glob.run_errs = true
C 		return(0)
C 	end
C end
C

----------------------------------------------------------------
Actor childs_func Comp name != Actor
----------------------------------------------------------------

-C 		if va[0] == "Child" # ${}
C 			childs.each do |st|
C 				if va.size > 1
C 					ret = st.do_its(glob, va[1..], lno)
C 					if ret != 0
C 						return(ret)
C 					end
C 					next
C 				end
C 				ret = go_act(glob, st)
C 				if ret != 0
C 					return(ret)
C 				end
C 			end
-C 			return(0)
-C 		end

Break loop

----------------------------------------------------------------
Actor parent_field_p Comp name = Actor
----------------------------------------------------------------

C 		@parentp = act.ap_${name}l.size-1;
C 		if @parentp < 0  
C 			puts lno + " ${.struct.name}c has no ${name}c parent" 
C 			return false
C 		end
C 		act.ap_${name}l[ @parentp ].childs << self

----------------------------------------------------------------
Actor parent_field_p Comp name != Actor
----------------------------------------------------------------

C 		@parentp = act.ap_${name}l.size-1;
C 		@names["k_parent"] = @parentp.to_s
C 		if @parentp < 0  
C 			puts lno + " ${.struct.name}c has no ${name}c parent" 
C 			return false
C 		end
C 		act.ap_${name}l[ @parentp ].its${.struct.name}l << self
C 		act.ap_${name}l[ @parentp ].childs << self

----------------------------------------------------------------
Actor index Comp find = Find
----------------------------------------------------------------

Its Element index_name

----------------------------------------------------------------
Actor index_name Element name = name
----------------------------------------------------------------

C 		act.index["${.index.name}c_" + @names["name"]] = @me

----------------------------------------------------------------
Actor index_act Comp find = Find
----------------------------------------------------------------

Its Element index_act_name

----------------------------------------------------------------
Actor index_act_name Element name = name
----------------------------------------------------------------

C 		act.index["${.index_act.name}c_" + @k_name] = @me

----------------------------------------------------------------
Actor index Comp find = FindIn
----------------------------------------------------------------

Its Element index_name_in

----------------------------------------------------------------
Actor index_name_in Element name = name
----------------------------------------------------------------

C 		s = @parentp.to_s + "_${.index.name}c_" + @names["name"]
C 		act.index[s] = @me

----------------------------------------------------------------
Actor ele_act . mw in C1,R1,F1,L1
----------------------------------------------------------------

C 		p, @k_${name}l = getw(ln, p)

----------------------------------------------------------------
Actor ele_act . mw = V1
----------------------------------------------------------------

C 		p, @k_${name}l = getws(ln, p)

----------------------------------------------------------------
Actor ele . mw in C1,R1,F1,L1,M1
----------------------------------------------------------------

C 		p, @names["${name}l"] = getw(ln, p)

----------------------------------------------------------------
Actor ele . mw = V1
----------------------------------------------------------------

C 		p, @names["${name}l"] = getws(ln, p)

----------------------------------------------------------------
Actor childs Comp
----------------------------------------------------------------

C 	property childs : Array(Kp) = Array(Kp).new

Break loop

----------------------------------------------------------------
Actor find Comp find = FindIn
----------------------------------------------------------------

Its Element ele_name_in

----------------------------------------------------------------
Actor ele_name_in . name = name
----------------------------------------------------------------

C 		if va[0] == "${.find.name}c"  && va.size > 2 # ${} 
C 			if en = glob.dats.index[me.to_s + "_${.find.name}c_" + va[1] ]?
C 				return (glob.dats.ap_${.find.name}l[en].get_var(glob, va[2..], lno))
C 			end
C 			return(false, "?" + va[0] + "=" + va[1] + "?" + line_no + "," + lno + "?")
C 		end

----------------------------------------------------------------
Actor ref_func Ref
----------------------------------------------------------------

C 		if va[0] == "${element.name}l"
C 			if k_${element.name}lp >= 0
C 				st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ]
C 				if va.size > 1
C 					return( st.do_its(glob, va[1..], lno) )
C 				end
C 				return( go_act(glob, st) )
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor ref_func2 Ref2
----------------------------------------------------------------

C 		if va[0] == "${element.name}l"
C 			if k_${element.name}lp >= 0
C 				st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ]
C 				if va.size > 1
C 					return( st.do_its(glob, va[1..], lno) )
C 				end
C 				return( go_act(glob, st) )
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor ref_func3 Ref3
----------------------------------------------------------------

C 		if va[0] == "${element.name}l"
C 			if k_${element.name}lp >= 0
C 				st = glob.dats.ap_${comp.name}l[ k_${element.name}lp ]
C 				if va.size > 1
C 					return( st.do_its(glob, va[1..], lno) )
C 				end
C 				return( go_act(glob, st) )
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor parent_field_func Comp
----------------------------------------------------------------

C 		if va[0] == "parent" # ${}
C 			if parentp >= 0
C 				st = glob.dats.ap_${name}l[ parentp ]
C 				if va.size > 1
C 					return( st.do_its(glob, va[1..], lno) )
C 				end
C 				return( go_act(glob, st) )
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor parent_field_var Comp
----------------------------------------------------------------

C 		if va[0] == "parent" # ${}
C 			if parentp >= 0 && va.size > 1
C 				return( glob.dats.ap_${name}l[ parentp ].get_var(glob, va[1..],lno) )
C 			end
C 		end

----------------------------------------------------------------
Actor other_func Ref
----------------------------------------------------------------

C 		if va[0] == "${parent.name}c_${element.name}l" # ${} 
C 			glob.dats.ap_${parent.name}l.each do |st|
C 				if st.k_${element.name}lp == me
C 					if va.size > 1
C 						ret = st.do_its(glob, va[1..], lno)
C 						if ret != 0
C 							return(ret)
C 						end
C 						next
C 					end
C 					ret = go_act(glob, st)
C 					if ret != 0
C 						return(ret)
C 					end
C 				end
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor other_func2 Ref2
----------------------------------------------------------------

C 		if va[0] == "${parent.name}c_${element.name}l" # ${} 
C 			glob.dats.ap_${parent.name}l.each do |st|
C 				if st.k_${element.name}lp == me
C 					if va.size > 1
C 						ret = st.do_its(glob, va[1..], lno)
C 						if ret != 0
C 							return(ret)
C 						end
C 						next
C 					end
C 					ret = go_act(glob, st)
C 					if ret != 0
C 						return(ret)
C 					end
C 				end
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor other_func3 Ref3
----------------------------------------------------------------

C 		if va[0] == "${parent.name}c_${element.name}l" # ${} 
C 			glob.dats.ap_${parent.name}l.each do |st|
C 				if st.k_${element.name}lp == me
C 					if va.size > 1
C 						ret = st.do_its(glob, va[1..], lno)
C 						if ret != 0
C 							return(ret)
C 						end
C 						next
C 					end
C 					ret = go_act(glob, st)
C 					if ret != 0
C 						return(ret)
C 					end
C 				end
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor ref_var Ref
----------------------------------------------------------------

C 		if va[0] == "${element.name}l" # ${}
C 			if k_${element.name}lp >= 0 && va.size > 1
C 				return( glob.dats.ap_${comp.name}l[ k_${element.name}lp ].get_var(glob, va[1..], lno) )
C 			end
C 		end

----------------------------------------------------------------
Actor ref_var2 Ref2
----------------------------------------------------------------

C 		if va[0] == "${element.name}l" # ${}
C 			if k_${element.name}lp >= 0 && va.size > 1
C 				return( glob.dats.ap_${comp.name}l[ k_${element.name}lp ].get_var(glob, va[1..], lno) )
C 			end
C 		end

----------------------------------------------------------------
Actor ref_var3 Ref3
----------------------------------------------------------------

C 		if va[0] == "${element.name}l" # ${}
C 			if k_${element.name}lp >= 0 && va.size > 1
C 				return( glob.dats.ap_${comp.name}l[ k_${element.name}lp ].get_var(glob, va[1..], lno) )
C 			end
C 		end

----------------------------------------------------------------
Actor star Star
----------------------------------------------------------------

D 	* ${doc} 

----------------------------------------------------------------
Actor val_inc_d Element
----------------------------------------------------------------

D 	${name}l * ${doc} 

----------------------------------------------------------------
-Actor val_inc Element
Actor val_inc Element mw = C1 	property k_${name}l : String = ""
Actor val_inc Element mw = V1 	property k_${name}l : String = ""
Actor val_inc Element mw = R1 	property k_${name}l : String = ""
Actor val_inc Element mw = F1 	property k_${name}l : String = ""
Actor val_inc Element mw = L1 	property k_${name}l : String = ""
Actor val_inc Element mw = M1 	property k_${name}l : String = ""
Actor val_inc2 Element mw = R1 	property k_${name}lp : Int32 = -1
Actor val_inc2 Element mw = F1 	property k_${name}lp : Int32 = -1
Actor val_inc2 Element mw = L1 	property k_${name}lp : Int32 = -1
Actor val_inc2 Element mw = M1 	property k_${name}lp : Int32 = -1
----------------------------------------------------------------
Actor parent_field Comp
----------------------------------------------------------------

C 	property parentp : Int32 = -1

----------------------------------------------------------------
Actor from_to Comp
----------------------------------------------------------------


C 	property its${name}l : Array(Kp${name}c) = Array(Kp${name}c).new

----------------------------------------------------------------
Actor from_to_doo Comp
----------------------------------------------------------------

C 		if va[0] == "${name}c" # ${}
C 			its${name}l.each do |st|
C 				if va.size > 1
C 					ret = st.do_its(glob, va[1..], lno)
C 					if ret != 0
C 						return(ret)
C 					end
C 					next
C 				end
C 				ret = go_act(glob, st)
C 				if ret != 0
C 					return(ret)
C 				end
C 			end
C 			return(0)
C 		end

----------------------------------------------------------------
Actor other_var Ref
----------------------------------------------------------------

C 		if va[0] == "${parent.name}c_${element.name}l" && va.size > 1 # ${} 
C 			glob.dats.ap_${parent.name}l.each do |st|
C 				if st.k_${element.name}lp == me
C 					return (st.get_var(glob, va[1..], lno) )
C 				end
C 			end
C 		end

----------------------------------------------------------------
Actor other_var2 Ref2
----------------------------------------------------------------

C 		if va[0] == "${parent.name}c_${element.name}l" && va.size > 1 # ${} 
C 			glob.dats.ap_${parent.name}l.each do |st|
C 				if st.k_${element.name}lp == me
C 					return (st.get_var(glob, va[1..], lno) )
C 				end
C 			end
C 		end

----------------------------------------------------------------
Actor other_var3 Ref3
----------------------------------------------------------------

C 		if va[0] == "${parent.name}c_${element.name}l" && va.size > 1 # ${} 
C 			glob.dats.ap_${parent.name}l.each do |st|
C 				if st.k_${element.name}lp == me
C 					return (st.get_var(glob, va[1..], lno) )
C 				end
C 			end
C 		end



